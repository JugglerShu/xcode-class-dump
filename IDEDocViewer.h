/*
 *     Generated by class-dump 3.3.3 (64 bit) (Debug version compiled Aug 11 2011 13:55:57).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark -

/*
 * File: /Developer/Library/Xcode/PrivatePlugIns/IDEDocViewer.ideplugin/Contents/MacOS/IDEDocViewer
 * UUID: EACD4DF5-BC6C-3CB5-A172-DAB926D307F9
 * Arch: Intel x86-64 (x86_64)
 *       Current version: 535.0.0, Compatibility version: 1.0.0
 *       Minimum Mac OS X version: 10.7.0
 *
 *       Objective-C Garbage Collection: Required
 *       Run path: @loader_path/../../../
 *               = /Developer/Library/Xcode/PrivatePlugIns
 */

@protocol DOMEventListener <NSObject>
- (void)handleEvent:(id)arg1;
@end

@protocol DSMDocSetLoaderListener

@optional
- (void)docSetWillBeUnloadedOrUpdated:(id)arg1;
- (void)docSetDidUnload:(id)arg1;
- (void)docSetDidLoad:(id)arg1;
@end

@protocol DSMDocSetSubscriptionListener

@optional
- (void)docSetGroup:(id)arg1 updateItemsModified:(id)arg2;
- (void)docSetGroup:(id)arg1 updateItemsAdded:(id)arg2;
- (void)docSetGroup:(id)arg1 updateItemsRemoved:(id)arg2;
@end

@protocol DVTBasicFindBarFindable <DVTFindBarFindable>
- (BOOL)basicFindBar:(id)arg1 findPreviousByWrapping:(BOOL)arg2;
- (BOOL)basicFindBar:(id)arg1 findNextByWrapping:(BOOL)arg2;
- (long long)basicFindBar:(id)arg1 findString:(id)arg2 caseSensitive:(BOOL)arg3 withFindType:(unsigned long long)arg4 andMatchStyle:(int)arg5;
- (BOOL)basicFindBar:(id)arg1 supportsMatchStyle:(int)arg2;
- (BOOL)basicFindBar:(id)arg1 supportsFindType:(unsigned long long)arg2;

@optional
- (void)basicFindBarLostFocus:(id)arg1;
@end

@protocol DVTFindBarFindable

@optional
- (id)startingLocationForFindBar:(id)arg1 findingBackwards:(BOOL)arg2;
- (void)dvtFindBar:(id)arg1 didUpdateCurrentResult:(id)arg2;
- (void)dvtFindBar:(id)arg1 didUpdateResults:(id)arg2;
@end

@protocol DVTInvalidation <NSObject>
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly, getter=isValid) BOOL valid;
- (void)invalidate;
@end

@protocol DVTOutlineViewDelegate <NSOutlineViewDelegate>

@optional
- (BOOL)outlineView:(id)arg1 shouldMouseHoverForTableColumn:(id)arg2 row:(long long)arg3;
- (void)outlineView:(id)arg1 concludeDragOperation:(id)arg2;
- (unsigned long long)outlineView:(id)arg1 draggingSourceOperationMaskForLocal:(BOOL)arg2;
- (void)outlineView:(id)arg1 draggingDidEnd:(id)arg2;
- (void)outlineView:(id)arg1 draggingDidUpdate:(id)arg2;
- (void)outlineView:(id)arg1 draggingDidEnter:(id)arg2;
- (BOOL)outlineView:(id)arg1 insertText:(id)arg2;
- (BOOL)outlineView:(id)arg1 doCommandBySelector:(SEL)arg2;
@end

@protocol DVTReplacementViewDelegate <NSObject>

@optional
- (void)replacementView:(id)arg1 willDisplayInRect:(struct CGRect)arg2;
- (void)replacementView:(id)arg1 willCloseViewController:(id)arg2;
- (void)replacementView:(id)arg1 didInstallViewController:(id)arg2;
- (void)replacementView:(id)arg1 willInstallViewController:(id)arg2;
@end

@protocol DVTSourceExpressionSource <NSObject, DVTInvalidation>
@property(readonly) DVTSourceExpression *mouseOverExpression;
@property(readonly) struct CGRect currentSelectionFrame;
@property(readonly) DVTSourceExpression *contextMenuExpression;
@property(readonly) DVTSourceExpression *selectedExpression;

@optional
@property(readonly) DVTSourceExpression *quickHelpExpression;
- (void)unregisterMouseOverExpressionObserver:(id)arg1;
- (void)registerMouseOverExpressionObserver:(id)arg1;
- (void)unregisterSelectedExpressionObserver:(id)arg1;
- (void)registerSelectedExpressionObserver:(id)arg1;
@end

@protocol DVTStatefulObject <NSObject>
+ (long long)version;
+ (void)configureStateSavingObjectPersistenceByName:(id)arg1;
- (void)commitStateToDictionary:(id)arg1;
- (void)revertStateWithDictionary:(id)arg1;
- (void)setStateToken:(id)arg1;

@optional
- (void)didPullStateFromRepository;
- (void)willPushStateToRepository;
@end

@protocol IDECommandHandler <NSObject, NSUserInterfaceValidations>
@end

@protocol IDEDocSearchResultDataProvider
- (id)findResultsImage;
- (id)findResultsAttributedString;
@end

@protocol IDEEditorAreaContainer
@property(readonly) IDEEditorArea *editorArea;
@end

@protocol IDEEditorContextDelegate <NSObject>

@optional
- (void)editorContext:(id)arg1 editorStateRepositoryDidChange:(id)arg2;
- (void)removeSplitForEditorContext:(id)arg1;
- (void)addSplitForEditorContext:(id)arg1;
- (id)editorContext:(id)arg1 navigableItemForEditingFromArchivedRepresentation:(id)arg2 error:(id *)arg3;
- (id)primaryEditorContext;
- (void)editorContextDidBecomeLastActiveEditor:(id)arg1;
- (BOOL)provideWorkspaceStructureForEmptyEditorContext:(id)arg1;
- (void)_editorContext:(id)arg1 openingEmptyEditorInsteadOfNavigableItem:(id)arg2;
- (BOOL)editorContext:(id)arg1 emptyEditorRootNavigableItem:(id *)arg2 selectedNavigableItem:(id *)arg3;
- (void)editorContext:(id)arg1 didUpdateMenu:(id)arg2;
- (BOOL)canCloseDocumentForEditorContext:(id)arg1;
- (void)editorContext:(id)arg1 didSetNavigableItem:(id)arg2;
- (id)editorContext:(id)arg1 relatedMenuItemsForNavItem:(id)arg2;
- (id)workspaceForEditorContext:(id)arg1;
@end

@protocol IDEEditorLoadingProgressProvider
@property(readonly) double editorLoadingProgress;
@end

@protocol IDEInitialization
+ (BOOL)ide_initializeWithOptions:(int)arg1 error:(id *)arg2;
@end

@protocol IDENavigatorOutlineViewDelegate <DVTOutlineViewDelegate>

@optional
- (struct _NSRange)outlineView:(id)arg1 initialSelectionRangeForCell:(id)arg2 proposedRange:(struct _NSRange)arg3;
- (BOOL)outlineView:(id)arg1 shouldShowOutlineCellForItem:(id)arg2 hasUserFocus:(BOOL)arg3;
- (id)outlineView:(id)arg1 childItemsForItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 isGroupHeaderItem:(id)arg2;
@end

@protocol IDEOrganizerSource <NSObject, DVTStatefulObject>

@optional
- (void)organizerSourceWillAppearInWindowController:(id)arg1;
- (void)openFileURL:(id)arg1 withFileType:(id)arg2;
- (void)searchWithString:(id)arg1;
@end

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (id)control:(id)arg1 textView:(id)arg2 completions:(id)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(id)arg1 isValidObject:(id)arg2;
- (void)control:(id)arg1 didFailToValidatePartialString:(id)arg2 errorDescription:(id)arg3;
- (BOOL)control:(id)arg1 didFailToFormatString:(id)arg2 errorDescription:(id)arg3;
- (BOOL)control:(id)arg1 textShouldEndEditing:(id)arg2;
- (BOOL)control:(id)arg1 textShouldBeginEditing:(id)arg2;
@end

@protocol NSMenuDelegate <NSObject>

@optional
- (struct CGRect)confinementRectForMenu:(id)arg1 onScreen:(id)arg2;
- (void)menu:(id)arg1 willHighlightItem:(id)arg2;
- (void)menuDidClose:(id)arg1;
- (void)menuWillOpen:(id)arg1;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (BOOL)menu:(id)arg1 updateItem:(id)arg2 atIndex:(long long)arg3 shouldCancel:(BOOL)arg4;
- (long long)numberOfItemsInMenu:(id)arg1;
- (void)menuNeedsUpdate:(id)arg1;
@end

@protocol NSObject
- (id)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
@end

@protocol NSOutlineViewDataSource <NSObject>

@optional
- (id)outlineView:(id)arg1 namesOfPromisedFilesDroppedAtDestination:(id)arg2 forDraggedItems:(id)arg3;
- (BOOL)outlineView:(id)arg1 acceptDrop:(id)arg2 item:(id)arg3 childIndex:(long long)arg4;
- (unsigned long long)outlineView:(id)arg1 validateDrop:(id)arg2 proposedItem:(id)arg3 proposedChildIndex:(long long)arg4;
- (void)outlineView:(id)arg1 updateDraggingItemsForDrag:(id)arg2;
- (BOOL)outlineView:(id)arg1 writeItems:(id)arg2 toPasteboard:(id)arg3;
- (void)outlineView:(id)arg1 draggingSession:(id)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)outlineView:(id)arg1 draggingSession:(id)arg2 willBeginAtPoint:(struct CGPoint)arg3 forItems:(id)arg4;
- (id)outlineView:(id)arg1 pasteboardWriterForItem:(id)arg2;
- (void)outlineView:(id)arg1 sortDescriptorsDidChange:(id)arg2;
- (id)outlineView:(id)arg1 persistentObjectForItem:(id)arg2;
- (id)outlineView:(id)arg1 itemForPersistentObject:(id)arg2;
- (void)outlineView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 byItem:(id)arg4;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
@end

@protocol NSOutlineViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)outlineViewItemDidCollapse:(id)arg1;
- (void)outlineViewItemWillCollapse:(id)arg1;
- (void)outlineViewItemDidExpand:(id)arg1;
- (void)outlineViewItemWillExpand:(id)arg1;
- (void)outlineViewSelectionIsChanging:(id)arg1;
- (void)outlineViewColumnDidResize:(id)arg1;
- (void)outlineViewColumnDidMove:(id)arg1;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (BOOL)outlineView:(id)arg1 shouldShowOutlineCellForItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)outlineView:(id)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (void)outlineView:(id)arg1 willDisplayOutlineCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (BOOL)outlineView:(id)arg1 shouldCollapseItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 shouldExpandItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 isGroupItem:(id)arg2;
- (id)outlineView:(id)arg1 dataCellForTableColumn:(id)arg2 item:(id)arg3;
- (BOOL)outlineView:(id)arg1 shouldTrackCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (BOOL)outlineView:(id)arg1 shouldShowCellExpansionForTableColumn:(id)arg2 item:(id)arg3;
- (BOOL)outlineView:(id)arg1 shouldTypeSelectForEvent:(id)arg2 withCurrentSearchString:(id)arg3;
- (id)outlineView:(id)arg1 nextTypeSelectMatchFromItem:(id)arg2 toItem:(id)arg3 forString:(id)arg4;
- (id)outlineView:(id)arg1 typeSelectStringForTableColumn:(id)arg2 item:(id)arg3;
- (double)outlineView:(id)arg1 heightOfRowByItem:(id)arg2;
- (id)outlineView:(id)arg1 toolTipForCell:(id)arg2 rect:(struct CGRect *)arg3 tableColumn:(id)arg4 item:(id)arg5 mouseLocation:(struct CGPoint)arg6;
- (void)outlineView:(id)arg1 didDragTableColumn:(id)arg2;
- (void)outlineView:(id)arg1 didClickTableColumn:(id)arg2;
- (void)outlineView:(id)arg1 mouseDownInHeaderOfTableColumn:(id)arg2;
- (BOOL)outlineView:(id)arg1 shouldSelectTableColumn:(id)arg2;
- (id)outlineView:(id)arg1 selectionIndexesForProposedSelection:(id)arg2;
- (BOOL)outlineView:(id)arg1 shouldSelectItem:(id)arg2;
- (BOOL)selectionShouldChangeInOutlineView:(id)arg1;
- (BOOL)outlineView:(id)arg1 shouldEditTableColumn:(id)arg2 item:(id)arg3;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (void)outlineView:(id)arg1 didRemoveRowView:(id)arg2 forRow:(long long)arg3;
- (void)outlineView:(id)arg1 didAddRowView:(id)arg2 forRow:(long long)arg3;
- (id)outlineView:(id)arg1 rowViewForItem:(id)arg2;
- (id)outlineView:(id)arg1 viewForTableColumn:(id)arg2 item:(id)arg3;
@end

@protocol NSSplitViewDelegate <NSObject>

@optional
- (void)splitViewDidResizeSubviews:(id)arg1;
- (void)splitViewWillResizeSubviews:(id)arg1;
- (struct CGRect)splitView:(id)arg1 additionalEffectiveRectOfDividerAtIndex:(long long)arg2;
- (struct CGRect)splitView:(id)arg1 effectiveRect:(struct CGRect)arg2 forDrawnRect:(struct CGRect)arg3 ofDividerAtIndex:(long long)arg4;
- (BOOL)splitView:(id)arg1 shouldHideDividerAtIndex:(long long)arg2;
- (BOOL)splitView:(id)arg1 shouldAdjustSizeOfSubview:(id)arg2;
- (void)splitView:(id)arg1 resizeSubviewsWithOldSize:(struct CGSize)arg2;
- (double)splitView:(id)arg1 constrainSplitPosition:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (BOOL)splitView:(id)arg1 shouldCollapseSubview:(id)arg2 forDoubleClickOnDividerAtIndex:(long long)arg3;
- (BOOL)splitView:(id)arg1 canCollapseSubview:(id)arg2;
@end

@protocol NSTableViewDataSource <NSObject>

@optional
- (id)tableView:(id)arg1 namesOfPromisedFilesDroppedAtDestination:(id)arg2 forDraggedRowsWithIndexes:(id)arg3;
- (BOOL)tableView:(id)arg1 acceptDrop:(id)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(id)arg1 validateDrop:(id)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(id)arg1 writeRowsWithIndexes:(id)arg2 toPasteboard:(id)arg3;
- (void)tableView:(id)arg1 updateDraggingItemsForDrag:(id)arg2;
- (void)tableView:(id)arg1 draggingSession:(id)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)tableView:(id)arg1 draggingSession:(id)arg2 willBeginAtPoint:(struct CGPoint)arg3 forRowIndexes:(id)arg4;
- (id)tableView:(id)arg1 pasteboardWriterForRow:(long long)arg2;
- (void)tableView:(id)arg1 sortDescriptorsDidChange:(id)arg2;
- (void)tableView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
@end

@protocol NSTableViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)tableViewSelectionIsChanging:(id)arg1;
- (void)tableViewColumnDidResize:(id)arg1;
- (void)tableViewColumnDidMove:(id)arg1;
- (void)tableViewSelectionDidChange:(id)arg1;
- (BOOL)tableView:(id)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)tableView:(id)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (BOOL)tableView:(id)arg1 isGroupRow:(long long)arg2;
- (BOOL)tableView:(id)arg1 shouldTypeSelectForEvent:(id)arg2 withCurrentSearchString:(id)arg3;
- (long long)tableView:(id)arg1 nextTypeSelectMatchFromRow:(long long)arg2 toRow:(long long)arg3 forString:(id)arg4;
- (id)tableView:(id)arg1 typeSelectStringForTableColumn:(id)arg2 row:(long long)arg3;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (void)tableView:(id)arg1 didDragTableColumn:(id)arg2;
- (void)tableView:(id)arg1 didClickTableColumn:(id)arg2;
- (void)tableView:(id)arg1 mouseDownInHeaderOfTableColumn:(id)arg2;
- (BOOL)tableView:(id)arg1 shouldSelectTableColumn:(id)arg2;
- (id)tableView:(id)arg1 selectionIndexesForProposedSelection:(id)arg2;
- (BOOL)tableView:(id)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)selectionShouldChangeInTableView:(id)arg1;
- (id)tableView:(id)arg1 dataCellForTableColumn:(id)arg2 row:(long long)arg3;
- (BOOL)tableView:(id)arg1 shouldTrackCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (BOOL)tableView:(id)arg1 shouldShowCellExpansionForTableColumn:(id)arg2 row:(long long)arg3;
- (id)tableView:(id)arg1 toolTipForCell:(id)arg2 rect:(struct CGRect *)arg3 tableColumn:(id)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (BOOL)tableView:(id)arg1 shouldEditTableColumn:(id)arg2 row:(long long)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (void)tableView:(id)arg1 didRemoveRowView:(id)arg2 forRow:(long long)arg3;
- (void)tableView:(id)arg1 didAddRowView:(id)arg2 forRow:(long long)arg3;
- (id)tableView:(id)arg1 rowViewForRow:(long long)arg2;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
@end

@protocol NSUserInterfaceItemSearching <NSObject>
- (id)localizedTitlesForItem:(id)arg1;
- (void)searchForItemsWithSearchString:(id)arg1 resultLimit:(long long)arg2 matchedItemHandler:(id)arg3;

@optional
- (void)showAllHelpTopicsForSearchString:(id)arg1;
- (void)performActionForItem:(id)arg1;
@end

@protocol NSUserInterfaceValidations
- (BOOL)validateUserInterfaceItem:(id)arg1;
@end

@protocol WebDocumentText <NSObject>
- (void)deselectAll;
- (void)selectAll;
- (id)selectedAttributedString;
- (id)selectedString;
- (id)attributedString;
- (id)string;
- (BOOL)supportsTextEncoding;
@end

@interface IDEDocViewerDocument : IDEEditorDocument
{
}

+ (BOOL)shouldUnlockFileURLBeforeMakingChanges;
- (int)readOnlyStatus;
- (void)updateChangeCount:(unsigned long long)arg1;
- (id)dataOfType:(id)arg1 error:(id *)arg2;
- (BOOL)readFromURL:(id)arg1 ofType:(id)arg2 error:(id *)arg3;

@end

@interface IDEDocViewerEditor : IDEEditor <DOMEventListener, DVTBasicFindBarFindable>
{
    DVTReplacementView *_replacementView;
    NSString *_findString;
    BOOL _findCaseSensitive;
    IDEDocEditorLoadingProgressController *_progressLoadingController;
    id <DVTObservingToken> _progressProviderToken;
    IDENavigableItemCoordinator *_navigableItemCoordinator;
    NSMutableArray *_downloaders;
    NSNumber *_stateSavingContentsScrollTop;
    DSANode *_displayedNode;
}

+ (long long)version;
+ (void)configureStateSavingObjectPersistenceByName:(id)arg1;
+ (void)downloadAndOpenSampleCodeArchiveAtURL:(id)arg1 title:(id)arg2 originWindow:(id)arg3;
+ (id)additionalItemsForHelpMenu;
+ (void)showDocumentationForHelpItem:(id)arg1;
+ (id)contextHelpMenuItemForHelpID:(id)arg1;
+ (void)_showAllHelpTopics:(id)arg1;
+ (id)defaultViewNibBundle;
+ (id)defaultViewNibName;
+ (BOOL)canProvideCurrentSelectedItems;
@property DSANode *displayedNode; // @synthesize displayedNode=_displayedNode;
@property(copy) NSNumber *stateSavingContentsScrollTop; // @synthesize stateSavingContentsScrollTop=_stateSavingContentsScrollTop;
@property IDENavigableItemCoordinator *navigableItemCoordinator; // @synthesize navigableItemCoordinator=_navigableItemCoordinator;
- (void)frameLoadDidFinishForWebView:(id)arg1;
- (void)handleEvent:(id)arg1;
- (id)_bodyElementWithScrollHeight;
- (BOOL)_isDocumentHTML;
- (void)commitStateToDictionary:(id)arg1;
- (void)revertStateWithDictionary:(id)arg1;
- (void)printDocument:(id)arg1;
- (id)printInfo;
@property(readonly) IDEDocEditorLoadingProgressController *progressLoadingController; // @synthesize progressLoadingController=_progressLoadingController;
- (void)showLoadingProgressWithProvider:(id)arg1;
- (void)basicFindBarLostFocus:(id)arg1;
- (BOOL)basicFindBar:(id)arg1 findPreviousByWrapping:(BOOL)arg2;
- (BOOL)basicFindBar:(id)arg1 findNextByWrapping:(BOOL)arg2;
- (long long)basicFindBar:(id)arg1 findString:(id)arg2 caseSensitive:(BOOL)arg3 withFindType:(unsigned long long)arg4 andMatchStyle:(int)arg5;
- (BOOL)basicFindBar:(id)arg1 supportsMatchStyle:(int)arg2;
- (BOOL)basicFindBar:(id)arg1 supportsFindType:(unsigned long long)arg2;
- (id)createFindBar;
- (BOOL)findBarSupported;
- (void)useSelectionForReplace:(id)arg1;
- (void)useSelectionForFind:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)takeFocus;
- (void)selectDocumentLocations:(id)arg1;
- (id)currentSelectedDocumentLocations;
- (id)currentSelectedItems;
- (void)loadWebViewWithURL:(id)arg1;
- (void)removeFromDownloaders:(id)arg1;
- (void)addToDownloaders:(id)arg1;
- (id)installedContentViewController;
@property(readonly) WebView *webView;
- (void)invalidate;
- (void)loadView;
- (id)historyCacheURL;

@end

@interface IDEDocSetCell : NSTextFieldCell
{
    IDEDocSetOutlineView *_docOutlineView;
    NSError *_docSetUpdateError;
    int _docSetUpdateStatus;
    NSMutableDictionary *_syndicationButtonCacheDict;
    BOOL _stateCacheIsValid;
    BOOL _isDocSetPublisherInstance;
    BOOL _isDocSetUpdateInstance;
    BOOL _docSetHasUpdate;
    BOOL _docSetIsNew;
    BOOL _updateCheckInProgress;
    id <DVTObservingToken> _updateStatusObservingToken;
    id <DVTObservingToken> _updateErrorObservingToken;
}

@property(copy) NSError *docSetUpdateError; // @synthesize docSetUpdateError=_docSetUpdateError;
- (id)publisherObject;
@property(readonly) DSADocSetUpdate *docSetUpdateObject;
- (void)clickInUpdatesColumn:(id)arg1;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)_nameAttributesWithLightGrayTextColor;
- (id)_nameAttributesWithOrangeTextColor;
- (id)_nameAttributesWithWhiteTextColor;
- (id)_nameAttributesWithBlackTextColor;
- (id)tableFont;
- (struct CGRect)_drawInfoButton:(id)arg1 inFrame:(struct CGRect)arg2 ofView:(id)arg3;
- (void)removeAllButtons;
- (struct CGRect)_drawUpdateButton:(id)arg1 inFrame:(struct CGRect)arg2 ofView:(id)arg3;
- (struct CGRect)_drawDownloadProblemButton:(id)arg1 inFrame:(struct CGRect)arg2 ofView:(id)arg3;
- (double)_xLocationForRSSControlsForCellWithFrame:(struct CGRect)arg1;
- (double)_infoButtonMinHeight;
- (double)_infoButtonMinWidth;
- (id)docSetUpdateButtonOfType:(int)arg1 forDocSetUpdate:(id)arg2;
- (id)fontForRSSLabel;
- (void)invalidateStateCache;
- (void)updateStateCache;
- (void)_docSetUpdateCheckDidFinish:(id)arg1;
- (void)_docSetUpdateCheckDidStart:(id)arg1;
- (BOOL)_docSetExistsOnDisk;
- (double)_rssButtonMinWidth;
- (BOOL)isDocSetCellSelected:(struct CGRect)arg1;
- (void)stopRSSUpdate:(id)arg1;
- (void)setRepresentedObject:(id)arg1;
- (id)syndicationButtonCacheDict;
- (id)initWithOutlineView:(id)arg1;

@end

@interface IDEDocSetGetInfoController : IDEViewController <DSMDocSetLoaderListener>
{
    DSADocSet *_docSet;
    DSADocSetUpdate *_docSetUpdate;
    NSMutableArray *_docSetProperties;
    IDEDocSetGetInfoTableView *_summaryTableView;
    NSArrayController *_propertiesController;
    BOOL _showRevealInFinderButton;
}

+ (id)docSetGetInfoControllerWithDocSetUpdate:(id)arg1;
+ (id)docSetGetInfoControllerWithDocSet:(id)arg1;
+ (id)docSetGetInfoControllers;
+ (id)lookupKeyForDocSet:(id)arg1;
+ (void)initialize;
@property NSArrayController *propertiesController; // @synthesize propertiesController=_propertiesController;
@property IDEDocSetGetInfoTableView *summaryTableView; // @synthesize summaryTableView=_summaryTableView;
@property BOOL showRevealInFinderButton; // @synthesize showRevealInFinderButton=_showRevealInFinderButton;
@property(copy) NSMutableArray *docSetProperties; // @synthesize docSetProperties=_docSetProperties;
@property DSADocSetUpdate *docSetUpdate; // @synthesize docSetUpdate=_docSetUpdate;
@property DSADocSet *docSet; // @synthesize docSet=_docSet;
- (void)replaceObjectInDocSetPropertiesAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectFromDocSetPropertiesAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inDocSetPropertiesAtIndex:(unsigned long long)arg2;
- (void)getDocSetProperties:(id *)arg1 range:(struct _NSRange)arg2;
- (id)objectInDocSetPropertiesAtIndex:(unsigned long long)arg1;
- (unsigned long long)countOfDocSetProperties;
- (void)revealDocSetInFinder:(id)arg1;
- (void)_loadDuplicateDocSetInfo;
- (void)_loadDocSetProperties;
- (void)_loadDocSetUpdateProperties;
- (void)awakeFromNib;
- (void)_setupTableView:(id)arg1;
- (void)_downloadDidFinish:(id)arg1;
- (void)_showPropertiesForDocSet:(id)arg1;
- (id)initWithObject:(id)arg1;

@end

@interface IDEDocSetGetInfoTableView : NSTableView
{
    NSArrayController *_arrayController;
}

@property NSArrayController *arrayController; // @synthesize arrayController=_arrayController;
- (void)copy:(id)arg1;

@end

@interface IDEDocSetOutlineView : NSOutlineView <NSOutlineViewDelegate>
{
    IDEDocSetOutlineViewController *_controller;
    NSMutableDictionary *_itemToDocSetCellDict;
    NSTableColumn *_docSetsColumnInOutlineView;
}

@property IDEDocSetOutlineViewController *controller; // @synthesize controller=_controller;
- (void)reloadData;
- (id)outlineViewItemForEvent:(id)arg1;
- (id)itemAtOutlineViewRow:(long long)arg1;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (void)outlineView:(id)arg1 didStartEditingColumn:(long long)arg2 row:(long long)arg3;
- (id)outlineView:(id)arg1 toolTipForCell:(id)arg2 rect:(struct CGRect *)arg3 tableColumn:(id)arg4 item:(id)arg5 mouseLocation:(struct CGPoint)arg6;
- (BOOL)outlineView:(id)arg1 shouldEditTableColumn:(id)arg2 item:(id)arg3;
- (void)outlineViewItemDidExpand:(id)arg1;
- (void)outlineViewItemDidCollapse:(id)arg1;
- (id)outlineView:(id)arg1 dataCellForTableColumn:(id)arg2 item:(id)arg3;
- (BOOL)outlineView:(id)arg1 shouldSelectItem:(id)arg2;
- (void)invalidateAllDocSetCellCaches;
- (void)selectRowIndexes:(id)arg1 byExtendingSelection:(BOOL)arg2;
- (void)redisplayAndUnselectOutlineViewItem:(id)arg1;
- (void)redisplayOutlineViewItem:(id)arg1;
- (void)removeSyndicationButtonsForPublisher:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_docOutlineViewWindowWillClose:(id)arg1;
@property(readonly) NSTableColumn *docSetsColumnInOutlineView; // @synthesize docSetsColumnInOutlineView=_docSetsColumnInOutlineView;
- (void)awakeFromNib;
- (id)itemToDocSetCellDict;

@end

@interface IDEDocSetOutlineViewController : NSObject <DSMDocSetLoaderListener, NSOutlineViewDelegate>
{
    IDEDocSetOutlineView *_docSetOutlineView;
    IDEDocViewingPrefPaneController *_preferencesController;
    BOOL _deleteButtonEnabled;
    BOOL _infoButtonEnabled;
    DSADocSetUpdate *_selectedDocSetUpdate;
}

+ (id)sharedInstance;
@property DSADocSetUpdate *selectedDocSetUpdate; // @synthesize selectedDocSetUpdate=_selectedDocSetUpdate;
@property BOOL infoButtonEnabled; // @synthesize infoButtonEnabled=_infoButtonEnabled;
@property BOOL deleteButtonEnabled; // @synthesize deleteButtonEnabled=_deleteButtonEnabled;
@property IDEDocSetOutlineView *docSetOutlineView; // @synthesize docSetOutlineView=_docSetOutlineView;
@property IDEDocViewingPrefPaneController *preferencesController; // @synthesize preferencesController=_preferencesController;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
@property(readonly) id clickedItemInOutlineView;
- (void)selectDocSetUpdate:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)canUnsubscribeFromPublisher:(id)arg1;
- (id)publisherContainingGroup:(id)arg1;
- (void)subscribeToPublisherAction:(id)arg1;
- (void)showProblemInfoForUpdate:(id)arg1;
- (void)docSetUpdateFailed:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)retryInstallUpdate:(id)arg1;
- (void)updateDocSetAction:(id)arg1;
- (void)getDocSetAction:(id)arg1;
- (void)_getOrUpdateDocSet:(id)arg1;
- (void)unsubscribeFromPublisher:(id)arg1;
- (id)clickedDocSet;
- (id)docSetsColumnInOutlineView;
- (void)refreshOutlineView;
- (void)docSetDidUnload:(id)arg1;
- (void)docSetWillBeUnloadedOrUpdated:(id)arg1;
- (void)awakeFromNib;

@end

@interface IDEDocSetSyndicationButton : NSButton
{
    DSADocSetUpdate *_docSetUpdateObject;
    int _syndicationButtonType;
}

@property int syndicationButtonType; // @synthesize syndicationButtonType=_syndicationButtonType;
@property DSADocSetUpdate *docSetUpdateObject; // @synthesize docSetUpdateObject=_docSetUpdateObject;
- (id)_toolTipForUpdateButtonWithLabel:(id)arg1;
- (id)_localizedUpdateButtonString:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 buttonType:(int)arg2;

@end

@interface IDEDocSetUpdateFailedController : NSObject
{
    DSADocSetUpdate *_failedUpdate;
}

+ (id)updateControllerForDocSetUpdate:(id)arg1;
@property DSADocSetUpdate *failedUpdate; // @synthesize failedUpdate=_failedUpdate;
- (id)alertForUpdateError;
- (id)initWithDocSetUpdate:(id)arg1;

@end

@interface IDEDocViewingPrefPaneController : IDEViewController <DSMDocSetLoaderListener, DSMDocSetSubscriptionListener, NSSplitViewDelegate>
{
    DVTBorderedView *_borderedView;
    IDEDocSetOutlineViewController *_docSetOutlineViewController;
    NSComboBox *_minimumFontSizeControl;
    NSTextField *_noUpdatesAvailableMessage;
    NSButton *_checkAndInstallNowButton;
    BOOL _oneShotUpdateCheckInProgress;
    NSButton *showInfoButton;
    WebPreferences *_webPreferences;
    BOOL _subscriptionURLIsValid;
    NSWindow *_subscriptionWindow;
    NSTextField *_subscriptionTextField;
    NSButton *_validateAddSubscriptionButton;
    NSString *_subscriptionTextFieldString;
    DVTBorderedView *_borderedViewBelowTable;
    DVTBorderedView *_borderedViewAroundSplitView;
    NSSplitView *_splitView;
    NSView *_splitViewDocSetsListSubview;
    NSView *_splitViewDocSetInfoSubview;
    id _selectedDocSetUpdateToken;
    NSTextView *_docSetInfoTextView;
    NSMapTable *_clientTrackingTokens;
    NSMapTable *_docSetUpdateStatusTokens;
    DVTGradientImageButton *_deleteButton;
    DVTGradientImageButton *_addButton;
    DVTGradientImageButton *_showInfoAreaButton;
}

+ (id)keyPathsForValuesAffectingMinimumFontSizeString;
+ (int)validFontSizeForSize:(int)arg1;
@property NSTextView *docSetInfoTextView; // @synthesize docSetInfoTextView=_docSetInfoTextView;
@property DVTBorderedView *borderedViewAroundSplitView; // @synthesize borderedViewAroundSplitView=_borderedViewAroundSplitView;
@property DVTBorderedView *borderedViewBelowTable; // @synthesize borderedViewBelowTable=_borderedViewBelowTable;
@property NSButton *validateAddSubscriptionButton; // @synthesize validateAddSubscriptionButton=_validateAddSubscriptionButton;
@property NSTextField *subscriptionTextField; // @synthesize subscriptionTextField=_subscriptionTextField;
@property NSWindow *subscriptionWindow; // @synthesize subscriptionWindow=_subscriptionWindow;
@property NSButton *checkAndInstallNowButton; // @synthesize checkAndInstallNowButton=_checkAndInstallNowButton;
@property NSTextField *noUpdatesAvailableMessage; // @synthesize noUpdatesAvailableMessage=_noUpdatesAvailableMessage;
@property NSComboBox *minimumFontSizeControl; // @synthesize minimumFontSizeControl=_minimumFontSizeControl;
@property IDEDocSetOutlineViewController *docSetOutlineViewController; // @synthesize docSetOutlineViewController=_docSetOutlineViewController;
@property BOOL oneShotUpdateCheckInProgress; // @synthesize oneShotUpdateCheckInProgress=_oneShotUpdateCheckInProgress;
@property BOOL subscriptionURLIsValid; // @synthesize subscriptionURLIsValid=_subscriptionURLIsValid;
@property WebPreferences *webPreferences; // @synthesize webPreferences=_webPreferences;
- (void)cancelDownload:(id)arg1;
- (void)startDownloadForDocSetUpdate:(id)arg1;
- (void)_startDownloadForDocSetUpdates:(id)arg1;
- (void)debug_printSubscriptionState:(id)arg1;
- (void)checkForAndInstallUpdatesNow:(id)arg1;
- (void)_displayNoUpdatesAvailableMessage;
- (void)_unhideNoUpdatesAvailableMessage;
- (void)_hideNoUpdatesAvailableMessage;
- (void)_notifyUpdateCheckDidStart;
- (void)_notifyUpdateCheckDidFinish;
- (void)toggleAutoCheckForAndInstallUpdates:(id)arg1;
- (void)_refreshAllDidFinish:(id)arg1;
- (void)splitViewDidResizeSubviews:(id)arg1;
- (BOOL)splitView:(id)arg1 shouldAdjustSizeOfSubview:(id)arg2;
- (double)splitView:(id)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (BOOL)splitView:(id)arg1 canCollapseSubview:(id)arg2;
- (void)toggleDocSetInfo:(id)arg1;
- (void)closeDocSetInfo;
- (void)openDocSetInfo;
- (BOOL)isDocSetInfoVisible;
- (id)openDocSetInfoViewImage;
- (id)closeDocSetInfoViewImage;
- (void)updateDocSetInfoForDocSetUpdate:(id)arg1;
- (id)userPresentableDescriptionForDocSetUpdate:(id)arg1;
- (id)userPresentableDescriptionForDocSetRecord:(id)arg1;
- (id)downloadSizeOfUpdate:(id)arg1;
- (void)appendInfo:(id)arg1 withLabel:(id)arg2 toAttributedString:(id)arg3 additionalAttributesForInfoStr:(id)arg4;
- (void)showSubscriptionSheet:(id)arg1;
- (void)subscriptionSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)endSubscriptionSheet:(id)arg1;
- (void)setSubscriptionTextFieldString:(id)arg1;
- (id)subscriptionTextFieldString;
- (void)addSubscription:(id)arg1;
- (void)showSubscriptionError:(id)arg1;
- (void)_scrollPublisherMakingGroupVisible:(id)arg1;
- (void)_subscriptionBadFeedURLSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)subscriptionCancelAction:(id)arg1;
- (void)showHelp:(id)arg1;
- (void)minimumFontSizeComboBoxAction:(id)arg1;
- (id)minimumFontSizeString;
@property unsigned long long minimumFontSize;
- (void)updateMinSizeComboBox;
- (void)minimumFontSizeEnabledAction:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)_initWebPreferences;
- (void)docSetDidLoad:(id)arg1;
- (void)docSetGroup:(id)arg1 updateItemsModified:(id)arg2;
- (void)docSetGroup:(id)arg1 updateItemsAdded:(id)arg2;
- (void)docSetGroup:(id)arg1 updateItemsRemoved:(id)arg2;
- (void)showLastCheckNowDate;
- (id)noUpdatesAvailableLabelText;
- (void)loadView;
- (void)_performanceMeasurementWithState:(int)arg1 comment:(id)arg2;

@end

@interface IDEDocPrefsSplitView : NSSplitView
{
}

- (double)dividerThickness;

@end

@interface IDEDocViewerMain : NSObject <NSUserInterfaceItemSearching, IDEInitialization>
{
    id _helpMenuResultsBlock;
}

+ (BOOL)ide_initializeWithOptions:(int)arg1 error:(id *)arg2;
- (void)showAllHelpTopicsForSearchString:(id)arg1;
- (void)performActionForItem:(id)arg1;
- (id)localizedTitlesForItem:(id)arg1;
- (void)searchForItemsWithSearchString:(id)arg1 resultLimit:(long long)arg2 matchedItemHandler:(id)arg3;
- (void)_executeQuery:(id)arg1;
- (void)descendantsOfTextResult:(id)arg1 descendants:(id)arg2;
- (id)queryWithSearchString:(id)arg1 docSet:(id)arg2;
- (void)applicationDidResignActive:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (double)_docSetDownloadCheckDelay;
- (id)init;

@end

@interface IDEDocSetStructureNode : NSObject <DSMDocSetLoaderListener>
{
    id _representedObject;
    NSMutableArray *_children;
}

+ (id)rootNode;
+ (id)structureNavigableItemInCoordinator:(id)arg1 forNode:(id)arg2;
+ (id)structureEditorOpenSpecifierForNode:(id)arg1 withURL:(id)arg2 error:(id *)arg3;
+ (id)structureEditorOpenSpecifierForDocumentationSearchNavigableItem:(id)arg1 error:(id *)arg2;
@property(readonly) id representedObject; // @synthesize representedObject=_representedObject;
- (id)description;
@property(readonly) NSArray *children;
- (void)_refreshChildren;
- (void)refreshChildrenAndNotify;
- (void)docSetWillBeUnloadedOrUpdated:(id)arg1;
- (void)docSetDidLoad:(id)arg1;
- (id)initWithRepresentedObject:(id)arg1;
- (id)init;
- (id)ideModelObjectTypeIdentifier;

@end

@interface IDEDocSetNodeStructureNavigableItem : IDEKeyDrivenNavigableItem
{
    NSURL *_pdfOverrideDocumentURL;
    id <DVTObservingToken> _childrenObservingToken;
}

@property(copy) NSURL *pdfOverrideDocumentURL; // @synthesize pdfOverrideDocumentURL=_pdfOverrideDocumentURL;
- (unsigned long long)indexOfChildItemForIdentifier:(id)arg1;
- (id)identifierForChildItem:(id)arg1;
- (id)contentDocumentLocation;
- (id)documentType;
- (id)name;
- (id)image;
- (id)childRepresentedObjects;
- (BOOL)isLeaf;
- (id)greatestDocumentAncestor;
- (void)invalidate;
- (id)initWithRepresentedObject:(id)arg1;

@end

@interface IDENavigableItemDocsetStructureDomainProvider : IDENavigableItemDomainProvider
{
}

+ (id)domainObjectForWorkspace:(id)arg1;

@end

@interface IDEDocSetNodeDocumentLocation : DVTDocumentLocation
{
    NSURL *_locationURL;
    DSANode *_node;
}

@property DSANode *node; // @synthesize node=_node;
@property(copy) NSURL *locationURL; // @synthesize locationURL=_locationURL;
- (id)description;
- (id)initWithDocumentURL:(id)arg1 locationURL:(id)arg2 timestamp:(id)arg3;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2;

@end

@interface IDEDocEditorArea : IDEViewController <IDEEditorContextDelegate>
{
    DVTReplacementView *_replacementView;
    IDENavigableItemCoordinator *_coordinator;
}

+ (id)documentLocationForDownloadableNavigableItemOfType:(unsigned long long)arg1 forNode:(id)arg2;
@property DVTReplacementView *replacementView; // @synthesize replacementView=_replacementView;
- (void)_openDownloadable_CompanionFiles:(id)arg1;
- (void)_openDownloadable_SampleCode:(id)arg1;
- (void)_openDownloadable_PDF:(id)arg1;
- (id)relatedItemsMenuItemForNavigableItem:(id)arg1 menuItemTitlePrefix:(id)arg2;
- (id)downloadableCompanionFileNavigableItemForNavItem:(id)arg1;
- (id)downloadableSampleCodeNavigableItemForNavItem:(id)arg1;
- (id)downloadablePDFNavigableItemForNavItem:(id)arg1;
- (id)docSetNodeFromNavigableItem:(id)arg1;
- (id)downloadableNavigableItemOfType:(unsigned long long)arg1 forNode:(id)arg2;
- (id)editorContext:(id)arg1 relatedMenuItemsForNavItem:(id)arg2;
- (id)navigableItemLoadedInEditor;
- (id)lastActiveEditorContext;
@property(readonly) IDEEditorContext *editorContext;
- (id)loadEditorState:(id)arg1;
- (id)docSetNodeInEditorContext:(id)arg1;
- (void)invalidate;
- (void)loadView;

@end

@interface IDEDocNavigatorArea : IDEViewController <DVTReplacementViewDelegate, DVTStatefulObject>
{
    DVTChooserView *_chooserView;
    DVTBorderedView *_borderedView;
    DVTReplacementView *_replacementView;
    NSArrayController *_choicesController;
    DVTExtension *_currentExtension;
    id <DVTObservingToken> _selectedItemToken;
    IDENavigableItem *_selectedNavigableItem;
    NSIndexSet *_chooserViewSelectionIndexes;
    IDEDocOrganizerSource *_organizerSource;
}

+ (long long)version;
+ (void)configureStateSavingObjectPersistenceByName:(id)arg1;
+ (id)keyPathsForValuesAffectingCurrentNavigator;
@property(copy) NSIndexSet *chooserViewSelectionIndexes; // @synthesize chooserViewSelectionIndexes=_chooserViewSelectionIndexes;
@property IDEDocOrganizerSource *organizerSource; // @synthesize organizerSource=_organizerSource;
@property DVTBorderedView *borderedView; // @synthesize borderedView=_borderedView;
@property IDENavigableItem *selectedNavigableItem; // @synthesize selectedNavigableItem=_selectedNavigableItem;
@property DVTReplacementView *replacementView; // @synthesize replacementView=_replacementView;
@property DVTChooserView *chooserView; // @synthesize chooserView=_chooserView;
@property DVTExtension *currentExtension; // @synthesize currentExtension=_currentExtension;
@property NSArrayController *choicesController; // @synthesize choicesController=_choicesController;
- (void)commitStateToDictionary:(id)arg1;
- (void)revertStateWithDictionary:(id)arg1;
- (void)_setCurrentExtensionIdentifier:(id)arg1;
- (id)_currentExtensionIdentifier;
- (void)replacementView:(id)arg1 willCloseViewController:(id)arg2;
- (void)replacementView:(id)arg1 didInstallViewController:(id)arg2;
- (void)setStateToken:(id)arg1;
- (void)showBookmarksArea:(id)arg1;
- (void)showSearchArea:(id)arg1;
- (void)showExploreArea:(id)arg1;
- (void)invalidate;
- (id)currentNavigator;
- (void)showNavigatorWithIdentifier:(id)arg1;
- (void)viewDidInstall;
- (void)loadView;

@end

@interface IDEDocOrganizerSource : IDEViewController <NSSplitViewDelegate, IDEEditorAreaContainer, DSMDocSetLoaderListener, IDEOrganizerSource, DVTReplacementViewDelegate>
{
    DVTReplacementView *_navigatorArea;
    DVTReplacementView *_editorAreaReplacementView;
    NSMutableArray *_observingTokens;
    DVTSplitView *_splitView;
    double _splitterPosition;
    NSMutableArray *_downloaders;
    IDENavigableItemCoordinator *_navItemCoordinator;
    IDEDocSearchOptionsController *_searchOptionsController;
    id _searchOptionsChangedToken;
    id <DVTObservingToken> _docSetLoadingToken;
}

+ (long long)version;
+ (void)configureStateSavingObjectPersistenceByName:(id)arg1;
+ (id)documentationOrganizerSource;
@property IDENavigableItemCoordinator *navItemCoordinator; // @synthesize navItemCoordinator=_navItemCoordinator;
@property DVTSplitView *splitView; // @synthesize splitView=_splitView;
@property DVTReplacementView *editorAreaReplacementView; // @synthesize editorAreaReplacementView=_editorAreaReplacementView;
@property DVTReplacementView *navigatorArea; // @synthesize navigatorArea=_navigatorArea;
- (void)commitStateToDictionary:(id)arg1;
- (void)revertStateWithDictionary:(id)arg1;
- (void)toggleNavigatorVisibility;
- (BOOL)isNavigatorVisible;
- (BOOL)canResetPageZoom;
- (void)resetPageZoom:(id)arg1;
- (BOOL)canZoomOut;
- (void)zoomOut:(id)arg1;
- (BOOL)canZoomIn;
- (void)zoomIn:(id)arg1;
- (id)editorWebView;
- (BOOL)splitView:(id)arg1 canCollapseSubview:(id)arg2;
- (double)splitView:(id)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (void)openPageInBrowser:(id)arg1;
- (void)addBookmarkForCurrentPage:(id)arg1;
- (void)addBookmarkForCurrentPage;
- (void)addBookmarkForToken:(id)arg1;
- (void)addBookmarkForNode:(id)arg1;
- (void)addBookmarkForNode:(id)arg1 title:(id)arg2 URL:(id)arg3;
- (id)installedNavigatorArea;
- (void)showXcodeReleaseNotes;
- (void)showXcodeUserGuide;
- (void)showXcodeHelpGuides;
- (void)showXcodeHomePage;
- (void)loadDefaultContentInEditor;
- (id)lastViewedURLFromUserDefaults;
- (void)docSetWillBeUnloadedOrUpdated:(id)arg1;
- (void)docSetDidUnload:(id)arg1;
- (void)revealEditorNodeInLibrary:(id)arg1;
- (void)loadHomePageOfFirstDocSetNotBeingUpdated;
- (void)refreshSearchOptions;
- (void)replacementView:(id)arg1 didInstallViewController:(id)arg2;
- (void)viewDidInstall;
- (void)_setUpNavigatorAreaObservations;
- (void)invalidate;
- (void)loadView;
- (void)displayPDFAtURL:(id)arg1 forDocSetNode:(id)arg2;
- (void)_openPDFAtFileURL:(id)arg1;
- (void)removeFromDownloaders:(id)arg1;
- (void)addToDownloaders:(id)arg1;
- (id)editor;
@property(readonly) IDENavigableItem *navigableItemLoadedInEditor;
- (void)contextMenu_searchForString:(id)arg1;
- (void)searchForString:(id)arg1;
- (void)_delayedSearchForString:(id)arg1;
- (void)loadEditorAreaWithNode:(id)arg1;
- (void)loadEditorAreaWithEditorOpenSpecifier:(id)arg1;
- (void)loadExploreNavigatorWithNode:(id)arg1;
@property(readonly) IDEEditorArea *editorArea;
@property(readonly) IDEDocSearchOptionsController *searchOptionsController;

@end

@interface IDEDocSearchArea : IDEDocNavigator <DSMDocSetLoaderListener>
{
    DVTReplacementView *_resultsReplacementView;
    IDEProgressSearchField *_searchField;
    NSString *_searchFieldString;
    NSString *_queuedSearchString;
    IDEDocSearchResultsController *_resultsController;
    NSMutableArray *_observingTokens;
    IDENavigableItemCoordinator *_navigableItemCoordinator;
    IDEDocSearchResultsContext *_resultsContext;
    IDEDocSearchController *_searchController;
    BOOL _showsSearchOptions;
    DVTBorderedView *_searchFieldBorderedView;
    DVTBorderedView *_searchOptionsBorderedView;
    DVTBorderedView *_searchResultsBorderedView;
    NSView *_stackView;
    DVTReplacementView *_searchOptionsReplacementView;
    NSMutableArray *_orderedHistoryItems;
}

+ (void)initialize;
@property DVTReplacementView *searchOptionsReplacementView; // @synthesize searchOptionsReplacementView=_searchOptionsReplacementView;
@property NSView *stackView; // @synthesize stackView=_stackView;
@property DVTBorderedView *searchResultsBorderedView; // @synthesize searchResultsBorderedView=_searchResultsBorderedView;
@property DVTBorderedView *searchOptionsBorderedView; // @synthesize searchOptionsBorderedView=_searchOptionsBorderedView;
@property DVTBorderedView *searchFieldBorderedView; // @synthesize searchFieldBorderedView=_searchFieldBorderedView;
@property BOOL showsSearchOptions; // @synthesize showsSearchOptions=_showsSearchOptions;
@property IDEDocSearchResultsContext *resultsContext; // @synthesize resultsContext=_resultsContext;
@property IDEProgressSearchField *searchField; // @synthesize searchField=_searchField;
@property DVTReplacementView *resultsReplacementView; // @synthesize resultsReplacementView=_resultsReplacementView;
- (void)controlTextDidChange:(id)arg1;
- (void)controlTextDidEndEditing:(id)arg1;
- (void)_delayedSetSearchFieldString:(id)arg1;
- (void)updateSearchResults;
- (void)generateSuggestionsForString:(id)arg1;
- (void)updateResultsWithContext:(id)arg1;
- (void)_changeMatchTypeAndSearch:(unsigned long long)arg1;
- (void)testing_setSearchFieldStringNoDelay:(id)arg1;
@property(copy) NSString *searchFieldString;
- (void)clearSearchResults;
- (void)searchFieldEndEditing:(id)arg1;
- (void)_beginSearch;
- (id)searchController;
- (void)_docSetGroupChanged:(id)arg1;
- (void)docSetWillBeUnloadedOrUpdated:(id)arg1;
- (void)docSetDidUnload:(id)arg1;
- (void)docSetDidLoad:(id)arg1;
- (void)focusSearchField;
- (void)_restoreQueryItem:(id)arg1;
- (void)clearHistory;
- (id)_recentsMenu;
- (void)_toggleFindOptions:(id)arg1;
- (void)_layoutNavigatorViews;
- (id)searchStrategiesController;
- (id)searchResultsView;
- (void)updateSearchResultsWithQuery:(id)arg1;
- (void)updateRecentHistoryItemsWithQuery:(id)arg1;
- (void)setUpSearchFieldCell;
- (id)contextMenuSelectedNavItems;
@property(readonly) IDEDocSearchResultsController *resultsController;
- (void)invalidate;
- (void)viewDidInstall;
- (void)loadView;
- (id)idedocnavigator_identifier;

@end

@interface _IDEDocSearchAreaControllerContentView : DVTControllerContentView
{
    DVTBorderedView *_searchFieldBorderedView;
    DVTBorderedView *_searchOptionsBorderedView;
    DVTBorderedView *_searchResultsBorderedView;
    IDEDocSearchArea *_searchNavigatorArea;
}

- (void)layoutTopDown;
- (void)layoutBottomUp;

@end

@interface IDEDocSearchResultsView : IDEViewController
{
    IDEDocSearchResultsOutlineView *_resultsOutlineView;
}

@property IDEDocSearchResultsOutlineView *resultsOutlineView; // @synthesize resultsOutlineView=_resultsOutlineView;
- (void)loadView;

@end

@interface IDEDocSearchController : NSObject
{
    NSString *_searchString;
    IDEDocSearchResultsGroup *_tokenResultsGroup;
    IDEDocSearchResultsGroup *_systemGuidesResultsGroup;
    IDEDocSearchResultsGroup *_toolsGuidesResultsGroup;
    IDEDocSearchResultsGroup *_textResultsGroup;
    DSMQueryRunner *_queryRunner;
    IDEDocSearchResultsContext *_resultsContext;
    IDEDocSearchOptionsController *_searchOptionsController;
}

@property IDEDocSearchOptionsController *searchOptionsController; // @synthesize searchOptionsController=_searchOptionsController;
@property(copy) NSString *searchString; // @synthesize searchString=_searchString;
- (void)updateResults:(id)arg1;
- (void)cancelSearch;
- (id)sampleCodeResultsGroup;
- (id)toolsGuidesResultsGroup;
- (id)systemGuidesResultsGroup;
- (id)referenceResultsGroup;
@property DSMQuery *query;
- (id)docSetRecordsForSearching;
- (id)nameKeyAscendingCaseInsensitiveSortDescriptor;
- (id)activeLanguages;
- (id)initWithSearchOptionsController:(id)arg1;

@end

@interface IDEDocSearchStrategiesController : IDEViewController
{
    IDEDocSearchOptionsController *_searchOptionsController;
    NSPopUpButton *_matchTypeButton;
    NSPopUpButton *_docSetsButton;
    NSPopUpButton *_languagesButton;
    IDEDocSearchArea *_docSearchArea;
    id _searchOptionsChangedToken;
}

+ (id)defaultViewNibName;
@property IDEDocSearchArea *docSearchArea; // @synthesize docSearchArea=_docSearchArea;
@property NSPopUpButton *languagesButton; // @synthesize languagesButton=_languagesButton;
@property NSPopUpButton *docSetsButton; // @synthesize docSetsButton=_docSetsButton;
@property NSPopUpButton *matchTypeButton; // @synthesize matchTypeButton=_matchTypeButton;
@property IDEDocSearchOptionsController *searchOptionsController; // @synthesize searchOptionsController=_searchOptionsController;
- (BOOL)validateMenuItem:(id)arg1;
- (void)updateResults;
- (void)updateOptions;
- (void)selectMatchType:(id)arg1;
- (void)changeMatchTypeTo:(unsigned long long)arg1;
- (void)_updateMatchTypeMenu;
- (void)toggleSearchingForDocSet:(id)arg1;
- (void)_updateDocSetsMenu;
- (id)displayStringOfDocSetsForSearching;
- (void)_updateLanguagesMenu;
- (id)displayStringOfAllLanguages;
- (void)toggleSearchingForLanguage:(id)arg1;
- (id)languagesSearchOptionsMenu;
- (void)_enableAllLanguages:(id)arg1;
- (id)menuItemForLanguage:(id)arg1;
- (void)setMenu:(id)arg1 forPopUpButton:(id)arg2 title:(id)arg3;
- (void)viewWillUninstall;
- (void)loadView;

@end

@interface IDEDocSearchResultsGroup : NSObject
{
    NSString *_localizedDisplayName;
    NSString *_groupIdentifier;
    NSMutableArray *_searchResults;
    NSDictionary *_sortDescriptorKeysAndMenuItemTitles;
    NSString *_queryString;
    NSArray *_sortedSearchResults;
}

+ (void)initialize;
@property(copy) NSString *queryString; // @synthesize queryString=_queryString;
@property(copy) NSDictionary *sortDescriptorKeysAndMenuItemTitles; // @synthesize sortDescriptorKeysAndMenuItemTitles=_sortDescriptorKeysAndMenuItemTitles;
@property(copy) NSString *groupIdentifier; // @synthesize groupIdentifier=_groupIdentifier;
@property(copy) NSString *localizedDisplayName; // @synthesize localizedDisplayName=_localizedDisplayName;
- (id)menuForSortingResults;
- (id)menuItemTitleForSortDescriptorKey:(id)arg1;
- (id)preferredSortDescriptor;
- (id)sortDescriptors;
- (id)sortDescriptorWithKey:(id)arg1;
- (void)sortResults:(id)arg1;
- (id)sortedSearchResults;
- (void)addSearchResults:(id)arg1;
- (id)ideModelObjectTypeIdentifier;
- (id)description;
- (id)init;
- (id)navigableItem_name;
- (BOOL)treeControllerIsLeaf;
- (id)treeControllerChildren;
- (id)displayName;

// Remaining properties
@property(readonly) NSMutableArray *mutableSearchResults; // @dynamic mutableSearchResults;
@property(copy) NSArray *searchResults; // @dynamic searchResults;

@end

@interface IDEDocSearchResultsController : NSObject <DVTOutlineViewDelegate, NSOutlineViewDataSource>
{
    IDEDocSearchResultsOutlineView *_outlineView;
    IDENavigableItem *_rootItem;
    NSArray *_sortedResultsGroups;
    NSMutableDictionary *_resultsGroupsAndDisplayCount;
    NSMutableArray *_documentItemsToAutoExpand;
    NSDictionary *_resultsGroupsAndDefaultDisplayCount;
    NSMutableArray *_expandedGroups;
    NSMutableDictionary *_groupCells;
    IDEDocSearchResultCell *_resultCell;
    IDENavigableItem *_selectedItem;
    NSString *_searchString;
    NSImage *_bookImage;
    NSImage *_sampleCodeImage;
    NSString *_autoExpandGroupIdentifier;
}

+ (id)groupStatusPrototypeCells;
@property(copy) NSString *autoExpandGroupIdentifier; // @synthesize autoExpandGroupIdentifier=_autoExpandGroupIdentifier;
@property(copy) NSString *searchString; // @synthesize searchString=_searchString;
@property IDENavigableItem *selectedItem; // @synthesize selectedItem=_selectedItem;
@property NSMutableDictionary *groupCells; // @synthesize groupCells=_groupCells;
@property IDENavigableItem *rootItem; // @synthesize rootItem=_rootItem;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (void)updateSelectedItemForSelectedRows;
- (BOOL)isGroupCollapsed:(id)arg1;
- (void)restoreExpansionState;
- (void)removeGroupFromCollapsedGroups:(id)arg1;
- (void)addGroupToCollapsedGroups:(id)arg1;
- (void)flushCollapsedGroups:(id)arg1;
- (id)collapsedGroups;
- (void)outlineView:(id)arg1 concludeDragOperation:(id)arg2;
- (unsigned long long)outlineView:(id)arg1 draggingSourceOperationMaskForLocal:(BOOL)arg2;
- (BOOL)outlineView:(id)arg1 doCommandBySelector:(SEL)arg2;
- (void)outlineViewItemDidCollapse:(id)arg1;
- (void)outlineViewItemDidExpand:(id)arg1;
- (BOOL)outlineView:(id)arg1 shouldSelectItem:(id)arg2;
- (id)outlineView:(id)arg1 selectionIndexesForProposedSelection:(id)arg2;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (BOOL)outlineView:(id)arg1 isGroupHeaderItem:(id)arg2;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (id)outlineView:(id)arg1 dataCellForTableColumn:(id)arg2 item:(id)arg3;
- (id)imageForGroup:(id)arg1;
- (id)sampleCodeImage;
- (id)bookImage;
- (void)toggleNumberOfResultsShown:(id)arg1;
- (long long)numberOfSearchResultsToDisplayForChildItem:(id)arg1;
- (unsigned long long)maxDisplayedItemsPerGroup;
- (void)expandToShowMostRelevantResults;
- (void)precomputeDefaultDisplayItems;
- (id)addRowsForCollapsedGroups:(id)arg1;
- (id)navItemsForUncollapsedGroups;
- (id)navigableItemOfAutoExpandGroup;
- (void)collapseAllGroupsExceptGroupWithIdentifier:(id)arg1;
- (unsigned long long)countOfDisplayedItemsForGroup:(id)arg1;
- (unsigned long long)countOfAvailableRows;
- (id)childItems;
- (void)reload;
- (void)clearSelection;
- (void)_resetGroupCellCache;
- (id)resultPrototypeCell;
- (id)newGroupCellForGroup:(id)arg1;
- (id)initWithOutlineView:(id)arg1;

@end

@interface IDEDocSearchResultsOutlineView : IDENavigatorOutlineView
{
    IDEDocSearchResultsController *_resultsController;
}

@property IDEDocSearchResultsController *resultsController; // @synthesize resultsController=_resultsController;
- (void)openClickedNavigableItemAction:(id)arg1;
- (void)openSelectedNavigableItemsKeyAction:(id)arg1;
- (id)menuForEvent:(id)arg1;

@end

@interface IDEDocViewerResultsCountTransformer : NSValueTransformer
{
}

+ (BOOL)allowsReverseTransformation;
+ (Class)transformedValueClass;
- (id)transformedValue:(id)arg1;

@end

@interface IDEDocSearchResultsContext : NSObject <DSMDocSetLoaderListener>
{
    NSArray *_resultsGroups;
    NSString *_searchString;
    BOOL _valid;
}

@property(getter=isValid) BOOL valid; // @synthesize valid=_valid;
@property(copy) NSString *searchString; // @synthesize searchString=_searchString;
@property(copy) NSArray *resultsGroups; // @synthesize resultsGroups=_resultsGroups;
- (void)docSetWillBeUnloadedOrUpdated:(id)arg1;
- (id)ideModelObjectTypeIdentifier;
- (id)init;

@end

@interface IDEDocSearchResultGroupCell : IDENavigatorDataCell
{
    IDENavigableItem *_navigableItemResultGroup;
    IDEDocSearchResultsController *_outlineViewController;
    long long _displayedItemsCount;
    BOOL _isResultsGroupExpanded;
    NSMutableDictionary *_buttons;
}

@property(retain) NSMutableDictionary *buttons; // @synthesize buttons=_buttons;
@property BOOL isResultsGroupExpanded; // @synthesize isResultsGroupExpanded=_isResultsGroupExpanded;
@property long long displayedItemsCount; // @synthesize displayedItemsCount=_displayedItemsCount;
@property IDEDocSearchResultsController *outlineViewController; // @synthesize outlineViewController=_outlineViewController;
@property IDENavigableItem *navigableItemResultGroup; // @synthesize navigableItemResultGroup=_navigableItemResultGroup;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawGroupExpansionControlWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)titleDropShadow;
- (id)subtitleTextColor;
- (id)showMoreLessButton;
- (id)initWithItem:(id)arg1 controller:(id)arg2;
- (void)resetButtonCache;

@end

@interface IDEDocSearchGroupExpansionButton : NSButton
{
    IDENavigableItem *_navigableItemResultGroup;
}

@property(retain) IDENavigableItem *navigableItemResultGroup; // @synthesize navigableItemResultGroup=_navigableItemResultGroup;
- (void)resetCursorRects;

@end

@interface IDEDocExploreArea : IDEDocNavigator <IDENavigatorOutlineViewDelegate, NSOutlineViewDataSource, DSMDocSetLoaderListener>
{
    IDEDocExploreOutlineView *_docSetsOutlineView;
    NSImage *_docSetsImage;
    NSImage *_categoryImage;
    IDENavigatorDataCell *_docSetCell;
    IDENavigatorDataCell *_nodeCell;
    IDENavigableItem *_selectedNode;
    IDENavigableItemCoordinator *_navigableItemCoordinator;
    NSSet *_expandedItems;
    NSArray *_selectedObjects;
    BOOL _restoringState;
}

+ (long long)version;
+ (void)configureStateSavingObjectPersistenceByName:(id)arg1;
+ (void)initialize;
@property IDENavigableItemCoordinator *navigableItemCoordinator; // @synthesize navigableItemCoordinator=_navigableItemCoordinator;
@property IDENavigatorOutlineView *docSetsOutlineView; // @synthesize docSetsOutlineView=_docSetsOutlineView;
- (id)stateSavingExpandedItems;
- (id)itemsForNameArrays:(id)arg1;
- (id)navigableItemWithName:(id)arg1 inArray:(id)arg2;
- (id)nameArraysForItems:(id)arg1;
- (id)stateSavingSelectedObjects;
- (void)setStateSavingSelectedObjects:(id)arg1;
- (void)setStateSavingExpandedItems:(id)arg1;
- (void)commitStateToDictionary:(id)arg1;
- (void)revertStateWithDictionary:(id)arg1;
- (void)outlineViewItemDidCollapse:(id)arg1;
- (void)outlineViewItemDidExpand:(id)arg1;
- (void)outlineView:(id)arg1 concludeDragOperation:(id)arg2;
- (unsigned long long)outlineView:(id)arg1 draggingSourceOperationMaskForLocal:(BOOL)arg2;
- (BOOL)outlineView:(id)arg1 doCommandBySelector:(SEL)arg2;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (id)outlineView:(id)arg1 dataCellForTableColumn:(id)arg2 item:(id)arg3;
- (BOOL)outlineView:(id)arg1 isGroupHeaderItem:(id)arg2;
- (void)updateSelectedNodeForSelectedRow;
- (id)nodeCell;
- (id)docSetCell;
- (void)docSetWillBeUnloadedOrUpdated:(id)arg1;
- (void)docSetDidUnload:(id)arg1;
- (void)docSetDidLoad:(id)arg1;
- (void)selectNavigableItemForDocSetNode:(id)arg1;
- (void)updateContent;
- (id)contextMenuSelectedNavItems;
- (void)invalidate;
- (id)idedocnavigator_identifier;
- (void)loadView;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(copy) NSSet *expandedItems; // @dynamic expandedItems;
@property(readonly) NSMutableSet *mutableExpandedItems; // @dynamic mutableExpandedItems;
@property(readonly) NSMutableArray *mutableSelectedObjects; // @dynamic mutableSelectedObjects;
@property(copy) NSArray *selectedObjects; // @dynamic selectedObjects;

@end

@interface IDEDocExploreOutlineView : IDENavigatorOutlineView
{
    IDEDocExploreArea *_exploreNavigator;
}

@property IDEDocExploreArea *exploreNavigator; // @synthesize exploreNavigator=_exploreNavigator;
- (void)openClickedNavigableItemAction:(id)arg1;
- (void)openSelectedNavigableItemsKeyAction:(id)arg1;
- (BOOL)_shouldContinueExpandAtLevel:(long long)arg1 beganAtLevel:(long long)arg2;

@end

@interface IDEDocSampleCodeArea : IDEViewController <NSTableViewDataSource, NSTableViewDelegate>
{
    NSArray *_sampleCodeNodes;
    IDENavigatorDataCell *_groupCell;
    IDENavigatorDataCell *_nodeCell;
    IDENavigatorOutlineView *_outlineView;
    IDENavigableItemCoordinator *_navigableItemCoordinator;
    IDENavigableItem *_selectedSampleCodeNode;
    NSImage *_docIcon;
    NSTreeController *_treeController;
}

@property NSTreeController *treeController; // @synthesize treeController=_treeController;
@property IDENavigableItemCoordinator *navigableItemCoordinator; // @synthesize navigableItemCoordinator=_navigableItemCoordinator;
@property IDENavigableItem *selectedSampleCodeNode; // @synthesize selectedSampleCodeNode=_selectedSampleCodeNode;
@property IDENavigatorOutlineView *outlineView; // @synthesize outlineView=_outlineView;
@property(copy) NSArray *sampleCodeNodes; // @synthesize sampleCodeNodes=_sampleCodeNodes;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (BOOL)outlineView:(id)arg1 shouldSelectItem:(id)arg2;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (id)outlineView:(id)arg1 dataCellForTableColumn:(id)arg2 item:(id)arg3;
- (BOOL)outlineView:(id)arg1 isGroupHeaderItem:(id)arg2;
- (double)outlineView:(id)arg1 heightOfRowByItem:(id)arg2;
- (id)docIcon;
- (id)groupCell;
- (id)nodeCell;
- (void)findSampleCode;
- (id)nodeSortDescriptors;
- (void)invalidate;
- (void)loadView;

@end

@interface IDEDocSearchResultCell : IDENavigatorDataCell
{
    NSString *_searchString;
    NSDictionary *_searchStringMatchAttributes;
    BOOL _deprecated;
}

@property(getter=isDeprecated) BOOL deprecated; // @synthesize deprecated=_deprecated;
@property(copy) NSString *searchString; // @synthesize searchString=_searchString;
- (id)attributedStringValue;
- (unsigned long long)lineBreakMode;
- (id)matchAttributes;
- (id)attributes;
- (id)_underlineHighlightColor;
- (id)_backgroundHighlightColor;

@end

@interface IDEDocBookmarksArea : IDEDocNavigator <NSOutlineViewDelegate, NSOutlineViewDataSource>
{
    IDEDocBookmarksOutlineView *_bookmarksOutlineView;
    IDENavigatorDataCell *_prototypeCell;
    IDENavigableItemCoordinator *_navigableItemCoordinator;
    NSImage *_bookImage;
    NSArray *_bookmarks;
    NSArray *_draggedBookmarks;
}

@property IDENavigableItemCoordinator *navigableItemCoordinator; // @synthesize navigableItemCoordinator=_navigableItemCoordinator;
@property IDEDocBookmarksOutlineView *bookmarksOutlineView; // @synthesize bookmarksOutlineView=_bookmarksOutlineView;
- (id)docSetNameForDocSetIdentifier:(id)arg1;
- (BOOL)outlineView:(id)arg1 acceptDrop:(id)arg2 item:(id)arg3 childIndex:(long long)arg4;
- (id)indexSetOfDraggedBookmarks:(id)arg1;
- (unsigned long long)outlineView:(id)arg1 validateDrop:(id)arg2 proposedItem:(id)arg3 proposedChildIndex:(long long)arg4;
- (BOOL)outlineView:(id)arg1 writeItems:(id)arg2 toPasteboard:(id)arg3;
- (id)moveObjectsInArrangedObjectsFromIndexes:(id)arg1 toIndex:(unsigned int)arg2;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (void)updateSelectedBookmarkForSelectedRow;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (BOOL)outlineView:(id)arg1 isGroupHeaderItem:(id)arg2;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (id)outlineView:(id)arg1 dataCellForTableColumn:(id)arg2 item:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (id)prototypeCell;
- (id)bookImage;
- (void)deleteSelectedBookmarks;
- (id)bookmarkManager;
- (void)saveBookmarks;
- (void)reload;
- (void)viewWillUninstall;
- (void)viewDidInstall;
- (void)invalidate;
- (id)idedocnavigator_identifier;
- (void)loadView;

@end

@interface IDEDocBookmarksOutlineView : IDENavigatorOutlineView
{
    IDEDocBookmarksArea *_bookmarksArea;
}

@property IDEDocBookmarksArea *bookmarksArea; // @synthesize bookmarksArea=_bookmarksArea;
- (void)openClickedNavigableItemAction:(id)arg1;
- (void)openSelectedNavigableItemsKeyAction:(id)arg1;
- (void)keyDown:(id)arg1;

@end

@interface DSMBookmarkPropertySupport : NSObject
{
}

+ (id)computeContentDocumentLocationFromRepresentedObject:(id)arg1;
+ (id)computeNameFromRepresentedObject:(id)arg1;

@end

@interface IDEDocSymbolUtilities : NSObject
{
    id _queryInfoFromIndexSymbolHandlerBlock;
}

- (id)typeForSymbol:(id)arg1;
- (id)queryInfoFromIndexSymbol:(id)arg1;
- (id)_inheritanceHierarchyForIndexSymbol:(id)arg1;
- (void)queryInfoFromIndexSymbol:(id)arg1 handlerBlock:(id)arg2;

@end

@interface IDEDocCommandHandler : NSObject <IDECommandHandler, NSMenuDelegate>
{
}

+ (id)handlerForAction:(SEL)arg1 withSelectionSource:(id)arg2;
- (void)idedoc_revealInLibrary:(id)arg1;
- (void)cancelDocumentationDownloads:(id)arg1;
- (void)showBookmarksNavigator:(id)arg1;
- (void)showSearchNavigator:(id)arg1;
- (void)showExploreNavigator:(id)arg1;
- (void)toggleNavigatorVisibility:(id)arg1;
- (void)addBookmark:(id)arg1;
- (void)actualSize:(id)arg1;
- (void)zoomOut:(id)arg1;
- (void)zoomIn:(id)arg1;
- (void)findInWorkspace:(id)arg1;
- (void)showXcodeReleaseNotes:(id)arg1;
- (void)showXcodeHelp:(id)arg1;
- (void)showDeveloperDocumentation:(id)arg1;
- (void)showXcodeUserGuide:(id)arg1;
- (void)contextMenu_addBookmark:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)searchDocumentationForSelectedText:(id)arg1;
- (id)contextMenuSelectedItemsInInstalledDocNavigator;
- (void)searchForString:(id)arg1;
- (void)showSearchArea;

@end

@interface IDEScriptingLoadDocumentationSetWithPath : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface IDEScriptingURLStringForDocumentWithUUID : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface IDEScriptingURLStringForApple_ref : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface IDEScriptingPathForApple_ref : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface IDEScriptingPathForDocumentWithUUID : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface IDEScriptingShowDocumentWithApple_ref : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface IDEScriptingShowDocumentWithUUID : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface IDEDocNavigator : IDEViewController
{
    id _selectedItem;
}

+ (long long)version;
+ (void)configureStateSavingObjectPersistenceByName:(id)arg1;
@property id selectedItem; // @synthesize selectedItem=_selectedItem;
- (void)commitStateToDictionary:(id)arg1;
- (void)revertStateWithDictionary:(id)arg1;
- (id)idedocnavigator_identifier;
- (id)contextMenuSelectedNavItems;

@end

@interface IDEDocSampleCodeDownloader : IDEDocURLDownloader
{
    unsigned long long _downloadStage;
    NSURL *_downloadDestinationDirectory;
    NSString *_sampleCodeProjectName;
}

@property(copy) NSString *sampleCodeProjectName; // @synthesize sampleCodeProjectName=_sampleCodeProjectName;
@property(copy) NSURL *downloadDestinationDirectory; // @synthesize downloadDestinationDirectory=_downloadDestinationDirectory;
@property unsigned long long downloadStage; // @synthesize downloadStage=_downloadStage;
- (void)downloadDidFinish:(id)arg1;
- (id)_moveExtractedContentInPath:(id)arg1;
- (id)_moveContentsOfDirectory:(id)arg1 toDirectory:(id)arg2;
- (id)_fileNameFromPath:(id)arg1;
- (void)_openExtractedProjectInPath:(id)arg1;
- (void)beginDownload;
- (void)cleanUp;
- (void)downloadDidBegin:(id)arg1;

@end

@interface IDEDocSampleCodeDownloadActivityReporter : IDEActivityReporter
{
    id _downloadObserver;
    NSMapTable *_queryToObservers;
}

+ (void)initialize;
- (id)stringForDownloadStateInDownloader:(id)arg1;
- (void)_observeDownload:(id)arg1;
- (id)initWithWorkspace:(id)arg1;

@end

@interface IDEDocURLDownloader : NSObject
{
    Class _downloadClass;
    NSURLDownload *_download;
    NSURLRequest *_request;
    NSURLResponse *_downloadResponse;
    NSWindow *_downloadOriginationWindow;
    NSString *_downloadDestinationFilePath;
    unsigned long long _bytesReceived;
    float _percentComplete;
}

@property Class downloadClass; // @synthesize downloadClass=_downloadClass;
@property float percentComplete; // @synthesize percentComplete=_percentComplete;
@property unsigned long long bytesReceived; // @synthesize bytesReceived=_bytesReceived;
@property(copy) NSURLResponse *downloadResponse; // @synthesize downloadResponse=_downloadResponse;
@property NSWindow *downloadOriginationWindow; // @synthesize downloadOriginationWindow=_downloadOriginationWindow;
@property(copy) NSString *downloadDestinationFilePath; // @synthesize downloadDestinationFilePath=_downloadDestinationFilePath;
@property NSURLDownload *download; // @synthesize download=_download;
- (void)quarantineExtractedArchiveAtPath:(id)arg1 fromDownload:(id)arg2;
- (void)_quarantineFileAtPath:(id)arg1 quarantineDictionary:(id)arg2;
- (void)cleanUp;
- (void)beginDownload;
- (BOOL)download:(id)arg1 shouldDecodeSourceDataOfMIMEType:(id)arg2;
- (void)download:(id)arg1 didFailWithError:(id)arg2;
- (void)downloadDidFinish:(id)arg1;
- (void)download:(id)arg1 decideDestinationWithSuggestedFilename:(id)arg2;
- (void)download:(id)arg1 didReceiveResponse:(id)arg2;
- (id)downloadWindowForAuthenticationSheet:(id)arg1;
- (void)download:(id)arg1 didReceiveDataOfLength:(unsigned long long)arg2;
- (id)initWithRequest:(id)arg1 downloadClass:(Class)arg2;

@end

@interface IDEDocPDFDownloadController : NSObject <IDEEditorLoadingProgressProvider>
{
    IDEDocPDFDownloader *_downloader;
    id <DVTObservingToken> _downloadObservingToken;
    id _completionHandler;
    double _editorLoadingProgress;
}

@property double editorLoadingProgress; // @synthesize editorLoadingProgress=_editorLoadingProgress;
- (void)downloadFinished:(id)arg1;
- (void)beginDownloadWithCompletionHandler:(id)arg1;
- (id)initWithRequestForPDF:(id)arg1;

@end

@interface IDEDocPDFDownloader : IDEDocURLDownloader
{
    IDEDocPDFDownloadController *_downloadController;
}

@property IDEDocPDFDownloadController *downloadController; // @synthesize downloadController=_downloadController;
- (void)downloadDidFinish:(id)arg1;

@end

@interface IDEDocEditorLoadingProgressController : NSObject
{
    IDEEditorLoadingProgressView *_progressView;
    IDEEditor *_editor;
}

- (void)updateWithValue:(double)arg1;
- (id)initWithEditor:(id)arg1;

@end

@interface IDEEditorLoadingProgressView : NSView
{
    double _progressValue;
}

- (void)_drawProgressBarTrack:(struct CGPath *)arg1 inRect:(struct CGRect)arg2;
- (void)_fillTrack:(struct CGPath *)arg1 withProgressInRect:(struct CGRect)arg2;
- (void)_drawTextInRect:(struct CGRect)arg1;
- (void)_drawProgressOverlayBackground;
- (struct CGPath *)_createTrackPathInProgressBarRect:(struct CGRect)arg1;
- (struct CGRect)_HUDFrame;
- (struct CGRect)_progressBarRect;
- (void)drawRect:(struct CGRect)arg1;
- (void)setProgressValue:(double)arg1;

@end

@interface IDEDocSetDownloadActivityReporter : IDEActivityReporter
{
    id _downloadObserver;
    NSMapTable *_downloaderToObservers;
}

+ (void)initialize;
- (id)stringForDownloadStateInDownloader:(id)arg1;
- (void)_observeDownload:(id)arg1;
- (id)initWithWorkspace:(id)arg1;

@end

@interface IDEDocBrowserHistory : NSObject
{
    struct __CFDateFormatter *_dateFormatter;
    NSMenu *_historyMenu;
}

+ (id)sharedHistory;
- (void)selectHistoryItem:(id)arg1;
- (void)clearHistory:(id)arg1;
- (id)historyMenu;
- (void)historyUpdate:(id)arg1;
- (void)loadHistory;
- (id)stringForCalendarDate:(id)arg1;
- (id)init;

@end

@interface IDEDocBrowserHistoryCommandHandler : NSObject <IDECommandHandler>
{
}

+ (id)handlerForAction:(SEL)arg1 withSelectionSource:(id)arg2;
- (BOOL)validateUserInterfaceItem:(id)arg1;

@end

@interface IDEDocSearchResult : NSObject <IDEDocSearchResultDataProvider>
{
    DSANode *_searchResultNode;
    DSATextSearchResult *_textResult;
    DSMQuery *_searchQuery;
    NSURL *_overrideURL;
}

+ (id)searchResultForTextResult:(id)arg1 overrideURL:(id)arg2 fromQuery:(id)arg3;
+ (id)searchResultForTextResult:(id)arg1 fromQuery:(id)arg2;
+ (id)searchResultForNode:(id)arg1 fromQuery:(id)arg2;
@property(copy) NSURL *overrideURL; // @synthesize overrideURL=_overrideURL;
@property DSMQuery *searchQuery; // @synthesize searchQuery=_searchQuery;
@property DSATextSearchResult *textResult; // @synthesize textResult=_textResult;
@property DSANode *searchResultNode; // @synthesize searchResultNode=_searchResultNode;
@property(readonly) NSURL *URL;
@property(readonly) NSString *displayName;
@property(readonly) NSArray *children;
- (id)ideModelObjectTypeIdentifier;
- (id)navigableItem_contentDocumentLocation;
- (id)navigableItem_name;
- (id)findResultsImage;
- (id)findResultsAttributedString;

@end

@interface IDEDocSearchResultsDistributor : NSObject
{
}

+ (id)distributionForGroupNavItems:(id)arg1 availableRows:(unsigned long long)arg2 groupToAutoExpand:(id)arg3 outAutoExpandChildren:(id *)arg4;
+ (unsigned long long)totalRowsAllocatedToGroups:(id)arg1;
+ (unsigned long long)totalResultsInGroups:(id)arg1;

@end

@interface IDEDocRecipeMenuBuilder : NSObject
{
}

- (void)menuNeedsUpdate:(id)arg1;

@end

@interface IDEDocSearchOptionsController : NSObject
{
    NSDictionary *_docSetIdentifiersAndEnabledState;
    NSDictionary *_languagesAndEnabledState;
    unsigned long long _matchType;
}

+ (void)initialize;
- (void)toggleSearchingForDocSet:(id)arg1;
- (void)_setDocSet:(id)arg1 isEnabledForSearching:(BOOL)arg2;
- (BOOL)isDocSetEnabledForSearching:(id)arg1;
- (unsigned long long)countOfEnabledDocSets:(unsigned long long *)arg1;
- (id)allDocSetsForSearching;
@property(readonly) NSArray *docSetsEnabledForSearching;
- (void)setIdentifiersOfEnabledDocSetsSearching:(id)arg1;
@property(readonly) NSDictionary *identifiersOfEnabledDocSets;
- (id)publisherMenuItems;
@property(readonly) NSArray *matchTypeMenuItems;
- (id)matchTypeMenuItemWithTitle:(id)arg1 tag:(unsigned long long)arg2;
- (void)changeMatchType:(long long)arg1;
- (void)_setSearchMatchType:(unsigned long long)arg1;
- (id)matchTypeForStateDictionary;
- (void)changeMatchTypeFromStateDictionary:(id)arg1;
@property(readonly) unsigned long long selectedMatchType;
- (void)toggleSearchingForLanguage:(id)arg1;
@property(readonly) NSDictionary *languagesAndEnabledState;
- (void)setLanguagesAndEnabledState:(id)arg1;
- (void)enableAllLanguagesForSearching;
@property(readonly) BOOL allLanguagesEnabled;
@property(readonly) NSArray *enabledLanguages;
- (void)_setLanguage:(id)arg1 isEnabledForSearching:(BOOL)arg2;
- (id)availableLanguagesForAPISearch;
- (BOOL)_isSearchingEnabledForLanguage:(id)arg1;
- (id)_languagesForSearching;
- (void)refresh;
- (void)setDefaultsFromQuery:(id)arg1;
- (id)init;
- (void)_upgradeUserDefaultsToStateSaving;

@end

@interface IDEDocModelObjectDataProvider : NSObject
{
}

+ (id)imageForNodeOrTextResult:(id)arg1;
+ (id)_imageForNode:(id)arg1;
+ (id)attributedStringForResult:(id)arg1;
+ (id)tokenScopeAttributedString:(id)arg1 separateLine:(BOOL)arg2 color:(id)arg3;
+ (BOOL)isTokenDeprecated:(id)arg1;

@end

@interface IDEDocSampleCodeHeaderView : IDEViewController
{
    DVTBorderedView *_headerBorderedView;
    NSTextField *_projectNameTextField;
    DVTBorderedView *_openButtonBorderedView;
    NSPopUpButton *_sourceFilesPopUp;
    DSANode *_node;
}

@property DSANode *node; // @synthesize node=_node;
- (void)openProject:(id)arg1;
- (void)_synchronizeViewsWithNode;
- (void)_selectSubnode:(id)arg1;
- (void)loadView;

@end

@interface IDEDocViewerContentView : IDEViewController
{
    MyWebView *_webView;
    DVTReplacementView *_sampleCodeHeaderViewReplacementView;
    double _cumulativeMagnifyDelta;
    short _stickyTextMagnifyGestureDirection;
    float _textSizeMultiplierAtGestureStart;
    NSURL *_initialRequestURL;
    IDEEditor *_editor;
}

@property(copy) NSURL *initialRequestURL; // @synthesize initialRequestURL=_initialRequestURL;
@property IDEEditor *editor; // @synthesize editor=_editor;
@property(readonly) WebView *webView; // @synthesize webView=_webView;
- (void)setZoomMultiplier:(float)arg1;
- (float)zoomMultiplier;
- (void)magnifyWithEvent:(id)arg1;
- (void)beginGestureWithEvent:(id)arg1;
- (void)haveWorkspaceOpenOrRevealURL:(id)arg1;
- (id)webView:(id)arg1 createWebViewWithRequest:(id)arg2;
- (id)webView:(id)arg1 contextMenuItemsForElement:(id)arg2 defaultMenuItems:(id)arg3;
- (id)_selectedStringInWebView:(id)arg1;
- (void)webView:(id)arg1 didFinishLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 resource:(id)arg2 didFinishLoadingFromDataSource:(id)arg3;
- (id)webView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;
- (void)webView:(id)arg1 resource:(id)arg2 didFailLoadingWithError:(id)arg3 fromDataSource:(id)arg4;
- (id)_textForLocalURLResourceLoadingFailure:(id)arg1;
- (id)_textForRemoteURLResourceLoadingFailure:(id)arg1;
- (id)webView:(id)arg1 identifierForInitialRequest:(id)arg2 fromDataSource:(id)arg3;
- (void)webView:(id)arg1 saveFrameView:(id)arg2 showingPanel:(BOOL)arg3;
- (void)webView:(id)arg1 decidePolicyForMIMEType:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (void)webView:(id)arg1 decidePolicyForNewWindowAction:(id)arg2 request:(id)arg3 newFrameName:(id)arg4 decisionListener:(id)arg5;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (void)loadWebViewWithURL:(id)arg1;
- (void)_recordLastViewedURL:(id)arg1;
- (void)updateContentViewForNode:(id)arg1;
- (void)configureWebView;
- (void)invalidate;
- (void)loadView;

@end

@interface MyWebView : WebView
{
}

- (void)setFrame:(struct CGRect)arg1;

@end

@interface DSADocSet (DSADocSetObjectIdentification)
- (id)ideModelObjectTypeIdentifier;
@end

@interface DSANode (DSANodeObjectIdentification)
- (id)ideModelObjectTypeIdentifier;
@end

@interface DSATextSearchResult (DSATextSearchResultObjectIdentification)
- (id)ideModelObjectTypeIdentifier;
@end

@interface DSAToken (DSATokenObjectIdentification)
- (id)ideModelObjectTypeIdentifier;
@end

@interface DSADocSet (DSADocSetPropertySupport)
- (id)navigableItem_contentDocumentLocation;
- (id)navigableItem_name;
@end

@interface DSANode (DSANodePropertySupport)
- (id)navigableItem_contentDocumentLocation;
- (id)navigableItem_name;
@end

@interface DSATextSearchResult (DSATextSearchResultPropertySupport)
- (id)navigableItem_contentDocumentLocation;
- (id)navigableItem_name;
@end

@interface DSAToken (DSATokenPropertySupport)
- (id)navigableItem_contentDocumentLocation;
- (id)navigableItem_name;
@end

@interface DSMQuery (IDEDocSearchHistorySupport)
- (id)descriptionForHistoryItem;
- (id)displayDescriptionForLanguages;
- (id)displayDescriptionForDocSets;
- (id)displayDescriptionForMatchType;
@end

@interface IDENavigableItem (DocSearchResultsSorting)
- (long long)_sortDocSearchResultsNavItems:(id)arg1;
@end

@interface DSAToken (FindResultsOutlineViewData) <IDEDocSearchResultDataProvider>
- (id)findResultsImage;
- (id)findResultsAttributedString;
@end

@interface DSANode (FindResultsOutlineViewData) <IDEDocSearchResultDataProvider>
- (id)findResultsImage;
- (id)findResultsAttributedString;
@end

@interface DSATextSearchResult (FindResultsOutlineViewData) <IDEDocSearchResultDataProvider>
- (id)findResultsImage;
- (id)findResultsAttributedString;
@end

@interface DSMBookmark (IDEDocViewerBookmarkModelObjectIdentification)
- (id)ideModelObjectTypeIdentifier;
@end

