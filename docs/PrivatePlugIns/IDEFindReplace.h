/*
 *     Generated by class-dump 3.3.3 (64 bit) (Debug version compiled Aug 11 2011 13:55:57).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

#pragma mark -

/*
 * File: /Developer/Library/Xcode/PrivatePlugIns/IDEFindReplace.ideplugin/Contents/MacOS/IDEFindReplace
 * UUID: 197800E8-A35A-3658-8CE1-913DDD6FD388
 * Arch: Intel x86-64 (x86_64)
 *       Current version: 536.0.0, Compatibility version: 1.0.0
 *       Minimum Mac OS X version: 10.7.0
 *
 *       Objective-C Garbage Collection: Required
 */

@protocol DVTDynamicTableViewDataSource <NSObject>
- (long long)dynamicTableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (long long)numberOfSectionsInDynamicTableView:(id)arg1;
@end

@protocol DVTDynamicTableViewDelegate <NSObject>
- (id)dynamicTableView:(id)arg1 viewForRow:(long long)arg2 inSection:(long long)arg3;
- (double)dynamicTableView:(id)arg1 heightForRow:(long long)arg2 inSection:(long long)arg3;

@optional
- (void)dynamicTableView:(id)arg1 didAddRowView:(id)arg2 forRow:(long long)arg3 inSection:(long long)arg4;
- (void)dynamicTableView:(id)arg1 didRemoveRowView:(id)arg2 forRow:(long long)arg3 inSection:(long long)arg4;
- (id)dynamicTableView:(id)arg1 objectValueForHeaderInSection:(long long)arg2;
- (id)dynamicTableView:(id)arg1 objectValueForRow:(long long)arg2 inSection:(long long)arg3;
- (double)dynamicTableView:(id)arg1 heightForHeaderInSection:(long long)arg2;
- (id)dynamicTableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
@end

@protocol DVTInvalidation <NSObject>
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly, getter=isValid) BOOL valid;
- (void)invalidate;
@end

@protocol DVTProgressReporting <NSObject>
@property(readonly) long long progress;
@end

@protocol DVTSourceExpressionSource <NSObject, DVTInvalidation>
@property(readonly) DVTSourceExpression *mouseOverExpression;
@property(readonly) struct CGRect currentSelectionFrame;
@property(readonly) DVTSourceExpression *contextMenuExpression;
@property(readonly) DVTSourceExpression *selectedExpression;

@optional
@property(readonly) DVTSourceExpression *quickHelpExpression;
- (void)unregisterMouseOverExpressionObserver:(id)arg1;
- (void)registerMouseOverExpressionObserver:(id)arg1;
- (void)unregisterSelectedExpressionObserver:(id)arg1;
- (void)registerSelectedExpressionObserver:(id)arg1;
@end

@protocol DVTTextFindable <NSObject>
- (id)findStringMatchingDescriptor:(id)arg1 backwards:(BOOL)arg2 from:(id)arg3 to:(id)arg4;

@optional
@property unsigned long long supportedMatchingOptions;
@end

@protocol DVTTextReplacable <NSObject>
- (BOOL)replaceFindResults:(id)arg1 withString:(id)arg2 withError:(id *)arg3;

@optional
- (BOOL)replaceTextWithContentsOfURL:(id)arg1 error:(id *)arg2;
@end

@protocol IDEBatchFindRuleEditorDelegate <NSRuleEditorDelegate>
- (BOOL)ruleEditor:(id)arg1 shouldAddRowOfType:(unsigned long long)arg2;
@end

@protocol IDEBatchFindScopeRuleRowDelegate
- (void)ruleRow:(id)arg1 changedDisplayValue:(id)arg2;
@end

@protocol IDECommandHandler <NSObject, NSUserInterfaceValidations>
@end

@protocol IDECommandHandlerVendor <NSObject>
+ (id)handlerForAction:(SEL)arg1 withSelectionSource:(id)arg2;
@end

@protocol IDENavigableItemCoordinatorDelegate <NSObject>

@optional
- (id)navigableItem:(id)arg1 childRepresentedObjectsForArray:(id)arg2;
- (id)navigableItemCoordinator:(id)arg1 editorDocumentForNavigableItem:(id)arg2;
@end

@protocol IDEProgressSearchFieldCommandDelegate <NSObject>
- (void)searchField:(id)arg1 receivedCommandSelector:(SEL)arg2;
@end

@protocol NSCacheDelegate <NSObject>

@optional
- (void)cache:(id)arg1 willEvictObject:(id)arg2;
@end

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (id)control:(id)arg1 textView:(id)arg2 completions:(id)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(id)arg1 isValidObject:(id)arg2;
- (void)control:(id)arg1 didFailToValidatePartialString:(id)arg2 errorDescription:(id)arg3;
- (BOOL)control:(id)arg1 didFailToFormatString:(id)arg2 errorDescription:(id)arg3;
- (BOOL)control:(id)arg1 textShouldEndEditing:(id)arg2;
- (BOOL)control:(id)arg1 textShouldBeginEditing:(id)arg2;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
- (id)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
@end

@protocol NSRuleEditorDelegate <NSObject>
- (id)ruleEditor:(id)arg1 displayValueForCriterion:(id)arg2 inRow:(long long)arg3;
- (id)ruleEditor:(id)arg1 child:(long long)arg2 forCriterion:(id)arg3 withRowType:(unsigned long long)arg4;
- (long long)ruleEditor:(id)arg1 numberOfChildrenForCriterion:(id)arg2 withRowType:(unsigned long long)arg3;

@optional
- (void)ruleEditorRowsDidChange:(id)arg1;
- (id)ruleEditor:(id)arg1 predicatePartsForCriterion:(id)arg2 withDisplayValue:(id)arg3 inRow:(long long)arg4;
@end

@protocol NSSplitViewDelegate <NSObject>

@optional
- (void)splitViewDidResizeSubviews:(id)arg1;
- (void)splitViewWillResizeSubviews:(id)arg1;
- (struct CGRect)splitView:(id)arg1 additionalEffectiveRectOfDividerAtIndex:(long long)arg2;
- (struct CGRect)splitView:(id)arg1 effectiveRect:(struct CGRect)arg2 forDrawnRect:(struct CGRect)arg3 ofDividerAtIndex:(long long)arg4;
- (BOOL)splitView:(id)arg1 shouldHideDividerAtIndex:(long long)arg2;
- (BOOL)splitView:(id)arg1 shouldAdjustSizeOfSubview:(id)arg2;
- (void)splitView:(id)arg1 resizeSubviewsWithOldSize:(struct CGSize)arg2;
- (double)splitView:(id)arg1 constrainSplitPosition:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (BOOL)splitView:(id)arg1 shouldCollapseSubview:(id)arg2 forDoubleClickOnDividerAtIndex:(long long)arg3;
- (BOOL)splitView:(id)arg1 canCollapseSubview:(id)arg2;
@end

@protocol NSTableViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)tableViewSelectionIsChanging:(id)arg1;
- (void)tableViewColumnDidResize:(id)arg1;
- (void)tableViewColumnDidMove:(id)arg1;
- (void)tableViewSelectionDidChange:(id)arg1;
- (BOOL)tableView:(id)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)tableView:(id)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (BOOL)tableView:(id)arg1 isGroupRow:(long long)arg2;
- (BOOL)tableView:(id)arg1 shouldTypeSelectForEvent:(id)arg2 withCurrentSearchString:(id)arg3;
- (long long)tableView:(id)arg1 nextTypeSelectMatchFromRow:(long long)arg2 toRow:(long long)arg3 forString:(id)arg4;
- (id)tableView:(id)arg1 typeSelectStringForTableColumn:(id)arg2 row:(long long)arg3;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (void)tableView:(id)arg1 didDragTableColumn:(id)arg2;
- (void)tableView:(id)arg1 didClickTableColumn:(id)arg2;
- (void)tableView:(id)arg1 mouseDownInHeaderOfTableColumn:(id)arg2;
- (BOOL)tableView:(id)arg1 shouldSelectTableColumn:(id)arg2;
- (id)tableView:(id)arg1 selectionIndexesForProposedSelection:(id)arg2;
- (BOOL)tableView:(id)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)selectionShouldChangeInTableView:(id)arg1;
- (id)tableView:(id)arg1 dataCellForTableColumn:(id)arg2 row:(long long)arg3;
- (BOOL)tableView:(id)arg1 shouldTrackCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (BOOL)tableView:(id)arg1 shouldShowCellExpansionForTableColumn:(id)arg2 row:(long long)arg3;
- (id)tableView:(id)arg1 toolTipForCell:(id)arg2 rect:(struct CGRect *)arg3 tableColumn:(id)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (BOOL)tableView:(id)arg1 shouldEditTableColumn:(id)arg2 row:(long long)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (void)tableView:(id)arg1 didRemoveRowView:(id)arg2 forRow:(long long)arg3;
- (void)tableView:(id)arg1 didAddRowView:(id)arg2 forRow:(long long)arg3;
- (id)tableView:(id)arg1 rowViewForRow:(long long)arg2;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
@end

@protocol NSTextFieldDelegate <NSControlTextEditingDelegate>
@end

@protocol NSUserInterfaceValidations
- (BOOL)validateUserInterfaceItem:(id)arg1;
@end

@interface IDEBatchFindCriteria : NSObject
{
    DVTFindDescriptor *_findDescriptor;
}

@property(readonly) DVTFindDescriptor *findDescriptor; // @synthesize findDescriptor=_findDescriptor;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithFindDescriptor:(id)arg1;

@end

@interface IDEBatchFindable : NSOperation
{
    NSArray *_findResults;
    DVTFindDescriptor *_findDescriptor;
    IDEBatchFindCandidateFile *_file;
    NSError *_error;
}

+ (BOOL)findableCanHandleFile:(id)arg1 forFindDescriptor:(id)arg2;
+ (id)findableForFindDescriptor:(id)arg1 onFile:(id)arg2;
@property(copy) NSError *error; // @synthesize error=_error;
@property(readonly) IDEBatchFindCandidateFile *file; // @synthesize file=_file;
@property(readonly) DVTFindDescriptor *findDescriptor; // @synthesize findDescriptor=_findDescriptor;
@property(readonly) NSArray *findResults; // @synthesize findResults=_findResults;
- (void)setDVTFindResults:(id)arg1;
@property(readonly) BOOL shouldFallbackToDocumentFindable;
@property(readonly) BOOL requiresMainThreadAccess;
- (id)initWithFindDescriptor:(id)arg1 onFile:(id)arg2;

@end

@interface IDEBatchDocumentFindable : IDEBatchFindable
{
    IDEEditorDocument *_document;
    BOOL _usesSharedDocument;
    BOOL _requiresMainThreadAccess;
}

+ (BOOL)findableCanHandleFile:(id)arg1 forFindDescriptor:(id)arg2;
@property BOOL requiresMainThreadAccess; // @synthesize requiresMainThreadAccess=_requiresMainThreadAccess;
- (BOOL)_loadDocument;
- (void)main;
- (id)initWithFindDescriptor:(id)arg1 onFile:(id)arg2;

@end

@interface IDEBatchRawTextFindable : IDEBatchFindable <DVTTextFindable, DVTTextReplacable>
{
    BOOL _shouldFallbackToDocumentFindable;
    NSString *_searchText;
    IDEBatchFindRawTextLineLocationFinder *_lineFinder;
}

+ (BOOL)findableCanHandleFile:(id)arg1 forFindDescriptor:(id)arg2;
@property BOOL shouldFallbackToDocumentFindable; // @synthesize shouldFallbackToDocumentFindable=_shouldFallbackToDocumentFindable;
- (BOOL)_loadText;
- (BOOL)replaceFindResults:(id)arg1 withString:(id)arg2 withError:(id *)arg3;
- (id)findStringMatchingDescriptor:(id)arg1 backwards:(BOOL)arg2 from:(id)arg3 to:(id)arg4;
- (void)main;

// Remaining properties
@property unsigned long long supportedMatchingOptions;

@end

@interface IDEBatchFindNavigator : IDENavigator <NSTextFieldDelegate, IDEProgressSearchFieldCommandDelegate>
{
    DVTStackView *searchContentView;
    DVTBorderedView *topBorderView;
    DVTBorderedView *bottomBorderView;
    DVTReplacementView *contentView;
    DVTStackView *bottomStackView;
    NSView *replaceView;
    IDEBatchFindReplaceButtonLayoutView *replaceButtonView;
    NSView *statusView;
    NSPopUpButton *_findModeButton;
    IDEProgressSearchField *_findStringField;
    NSTextField *_replaceStringField;
    double _statusCellHeight;
    NSMutableArray *_observerTokens;
    id <DVTObservingToken> _historyToken;
    id <DVTObservingToken> _replacePreviewViewToken;
    int _findMode;
    NSString *_findString;
    NSString *_replaceString;
    NSString *_statusString;
    NSString *_statusTitle;
    double _lastStatusUpdate;
    NSArray *_selectedResultNavigables;
    NSArray *_selectedObjects;
    IDEBatchFindReplaceableSheetController *_replacePreviewSheet;
    IDEBatchFindStrategiesController *_configurationController;
    IDEBatchFindQuery *_activeQuery;
    BOOL _showsOptions;
    IDEProgressSearchSuggestionItem *_currentSearchSuggestion;
    NSArray *_textualSuggestions;
    NSArray *_regularExpressionTextualSuggestions;
    NSArray *_currentScopeSuggestions;
    NSString *_findResultFilterString;
}

+ (id)keyPathsForValuesAffectingCanShowReplacePreview;
+ (id)keyPathsForValuesAffectingCanReplaceAll;
+ (id)keyPathsForValuesAffectingCanReplace;
+ (void)configureStateSavingObjectPersistenceByName:(id)arg1;
+ (id)defaultViewNibName;
@property(copy) NSString *findResultFilterString; // @synthesize findResultFilterString=_findResultFilterString;
@property BOOL showsOptions; // @synthesize showsOptions=_showsOptions;
@property IDEBatchFindQuery *activeQuery; // @synthesize activeQuery=_activeQuery;
@property int findMode; // @synthesize findMode=_findMode;
@property(copy) NSString *statusTitle; // @synthesize statusTitle=_statusTitle;
@property(copy) NSString *statusString; // @synthesize statusString=_statusString;
@property(copy) NSString *replaceString; // @synthesize replaceString=_replaceString;
@property(copy) NSString *findString; // @synthesize findString=_findString;
- (void)searchField:(id)arg1 receivedCommandSelector:(SEL)arg2;
- (void)updateFilterPredicate;
- (void)setFilterPredicate:(id)arg1;
- (void)_synchronizeFilteringWithOutlineView;
- (id)filterDefinitionIdentifier;
- (id)control:(id)arg1 textView:(id)arg2 completions:(id)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (void)_cancelFindOpeartion;
- (void)_startFindOperation;
- (void)_replaceResults:(id)arg1 withString:(id)arg2;
- (void)_doReplaceOnResults:(id)arg1;
- (void)_prepareReplaceOnResults:(id)arg1 withCompletionBlock:(id)arg2;
- (void)replaceAllAction:(id)arg1;
- (void)replaceSelectedAction:(id)arg1;
- (BOOL)makePrimaryFilterControlKey;
- (void)selectFindField:(id)arg1;
- (void)replaceStringFieldAction:(id)arg1;
- (void)searchFieldCancelled:(id)arg1;
- (void)findStringFieldAction:(id)arg1;
- (id)_localizedNumberDescription:(long long)arg1;
- (void)_updateSuggestions;
- (id)_currentScopeDescription;
- (BOOL)_searchShouldIncludeRegularExpressionSearchForString:(id)arg1;
- (void)controlTextDidChange:(id)arg1;
- (void)_setupSuggestions;
- (id)_recentsMenu;
- (void)_restoreFindHistory:(id)arg1;
- (void)_toggleFindOptions:(id)arg1;
- (void)_updateOutputSelection;
- (void)_statusNeedsUpdating:(BOOL)arg1;
- (void)_updateStatus;
- (id)_statusAttributes;
- (void)_setupSearchField;
- (void)_setupBindings;
- (void)_setupObservers;
- (void)performReplaceFromPreview:(id)arg1 withCompletionBlock:(id)arg2;
- (void)showReplacePreview:(id)arg1;
@property(readonly) BOOL canShowReplacePreview;
@property(readonly) BOOL canReplaceAll;
@property(readonly) BOOL canReplace;
@property(readonly) IDEBatchFindStrategiesController *configurationController;
- (void)layoutReplaceButtons;
- (void)sizeToFitWithAnimation:(BOOL)arg1;
@property(readonly) IDEBatchFindResultsOutlineController *resultsOutlineController;
- (void)commitStateToDictionary:(id)arg1;
- (void)revertStateWithDictionary:(id)arg1;
- (BOOL)delegateFirstResponder;
- (void)invalidate;
- (void)viewDidInstall;
- (void)viewWillUninstall;
- (void)loadView;

@end

@interface IDEBatchFindQuery : NSObject <DVTProgressReporting>
{
    IDEWorkspace *_workspace;
    NSOperationQueue *_mainThreadQueue;
    DVTDispatchLock *_mainThreadQueueLock;
    NSOperationQueue *_backgroundQueue;
    DVTDispatchLock *_backgroundQueueLock;
    NSOperationQueue *_findQueue;
    DVTDispatchLock *_findQueueLock;
    NSOperationQueue *_indexQueue;
    DVTDispatchLock *_indexQueyLock;
    NSDate *_startDate;
    NSDate *_completeDate;
    IDEBatchFindResultSet *_resultSet;
    long long _progress;
    int _state;
    DVTDispatchLock *_queryStateLock;
    DVTPerformanceMetric *_performanceMetric;
    id <IDEClientTrackingToken> _clientTrackingToken;
}

+ (unsigned long long)_backgroundQueueMaxWidth;
+ (id)newQueryWithCriteria:(id)arg1 forWorkspace:(id)arg2 inController:(id)arg3;
@property(readonly) IDEBatchFindResultSet *resultSet; // @synthesize resultSet=_resultSet;
@property(readonly) IDEWorkspace *workspace; // @synthesize workspace=_workspace;
@property long long progress; // @synthesize progress=_progress;
@property int state; // @synthesize state=_state;
- (id)_queryStateLock;
- (void)_transitionToFinishedState;
- (void)_transitionToCancelledState;
- (void)_transitionToExecutingState;
@property(readonly) BOOL isCancelled;
@property(readonly) BOOL isComplete;
@property(readonly) BOOL isRunning;
- (id)indexQueue;
@property(readonly) unsigned long long findQueueOperationCount;
- (void)addOperation:(id)arg1 toQueue:(int)arg2;
- (void)cancel;
- (id)_findQueueLock;
- (id)_indexQueueLock;
- (id)_backgroundQueueLock;
- (id)_mainThreadQueueLock;
- (void)start;
- (void)throttleBackgroundQueueWidthByFactor:(double)arg1;
- (void)setup;
@property(readonly) IDEBatchFindCriteria *criteria;
@property(readonly) DVTPerformanceMetric *performanceMetric;
- (id)initWithSearchCriteria:(id)arg1 forWorkspace:(id)arg2 inController:(id)arg3;

@end

@interface IDEBatchFindResultGroup : NSObject <NSCopying>
{
    NSArray *_results;
    NSMutableArray *_filteredResults;
    IDEBatchFindCandidateFile *_fileCandidate;
    unsigned long long _replaceableCount;
    unsigned long long _filteredReplaceableCount;
    NSImage *_displayImage;
    IDEIndex *_index;
    BOOL _showSymbolsForResults;
    BOOL _symbolLookUpEnabled;
    BOOL _backingFileChangedOnDisk;
}

@property(readonly) BOOL backingFileChangedOnDisk; // @synthesize backingFileChangedOnDisk=_backingFileChangedOnDisk;
@property(getter=isSymbolLookUpEnabled) BOOL symbolLookUpEnabled; // @synthesize symbolLookUpEnabled=_symbolLookUpEnabled;
@property BOOL showSymbolsForResults; // @synthesize showSymbolsForResults=_showSymbolsForResults;
@property IDEIndex *index; // @synthesize index=_index;
@property(readonly) IDEBatchFindCandidateFile *fileCandidate; // @synthesize fileCandidate=_fileCandidate;
- (void)_beginSymbolLookupForResults;
- (void)resetHiddenResults;
- (void)hideResultsWithIndexes:(id)arg1;
@property(readonly) NSString *displaySubtitle;
@property(readonly) NSImage *displayImage;
@property(readonly) NSString *displayTitle;
@property(readonly) IDEFileReference *fileReference;
@property(readonly) DVTFilePath *filePath;
@property(readonly) unsigned long long replaceableCount;
@property(readonly) NSArray *results;
- (void)setResults:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithResults:(id)arg1 fromFileCandidate:(id)arg2;
- (BOOL)isEditable;
- (id)ideModelObjectTypeIdentifier;
- (id)navigableItem_fileReference;
- (id)navigableItem_image;
- (id)navigableItem_name;
- (id)navigableItem_contentDocumentLocation;
- (id)navigableItem_documentType;

@end

@interface IDESearchResultTruncatingCell : DVTImageAndTextCell
{
    IDEBatchFindResult *_findResult;
    NSTextStorage *_textStorage;
    struct _NSRange _focusRange;
    struct CGSize _computedSize;
    BOOL _superDrawing;
    BOOL _stringCalculated;
    BOOL _showsStatusImage;
}

+ (id)keyPathsForValuesAffectingImage;
+ (void)initialize;
@property BOOL showsStatusImage; // @synthesize showsStatusImage=_showsStatusImage;
@property IDEBatchFindResult *findResult; // @synthesize findResult=_findResult;
- (id)accessibilityAttributeValue:(id)arg1;
- (void)_updateStringStorage;
- (id)paragraphStyle;
- (id)_underlineHighlightColor;
- (id)_backgroundHighlightColor;
- (id)_newlineReplacement;
- (id)_ellipsis:(long long *)arg1;
- (void)_trimLeadingWhitespaceFromString:(id)arg1 updateFocusRange:(struct _NSRange *)arg2;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawTitleInCellFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGSize)_attributedStringValueSize;
- (id)attributedStringValue;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (id)image;
- (void)updateBoundFindResult;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initImageCell:(id)arg1;
- (id)initTextCell:(id)arg1;
- (id)_generateTextStorage;
- (id)dvtExtraBindings;

@end

@interface IDEProgressSearchField : DVTSearchField
{
    NSString *_sanatizedSuggestionString;
    NSTableView *_suggestionTableView;
    NSTableColumn *_suggestionTitleColumn;
    NSWindow *_suggestionWindow;
    NSArray *_suggestionItems;
    NSArray *_allVisibleSuggestions;
    IDEProgressSearchSuggestionItem *_selectedSuggestionItem;
    id <IDEProgressSearchFieldCommandDelegate> _commandDelegate;
}

+ (Class)cellClass;
@property id <IDEProgressSearchFieldCommandDelegate> commandDelegate; // @synthesize commandDelegate=_commandDelegate;
@property(copy) NSArray *suggestionItems; // @synthesize suggestionItems=_suggestionItems;
- (id)tableView:(id)arg1 dataCellForTableColumn:(id)arg2 row:(long long)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (BOOL)tableView:(id)arg1 shouldSelectRow:(long long)arg2;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)_selectionMade:(id)arg1;
- (void)_controlTextDidChange:(id)arg1;
- (void)_updateMenu;
- (void)_generateMenuWindow;
- (void)_refreshTable;
- (BOOL)textView:(id)arg1 doCommandBySelector:(SEL)arg2;
- (void)controlTextDidChange:(id)arg1;
- (void)controlTextDidEndEditing:(id)arg1;
@property IDEProgressSearchSuggestionItem *selectedSuggestionItem;
- (void)hideSuggestions;
- (void)showSuggestions;
@property(readonly) BOOL suggestionsVisible;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property(readonly) NSArray *allVisibleSuggestions;
- (void)ide_progressSearchField_setup;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithCoder:(id)arg1;
@property(readonly) _IDEProgressSearchFieldCell *cell;

@end

@interface _IDEProgressSearchSeparatorCell : NSCell
{
}

- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface _IDEProgressSearchSuggestionsWindowContentView : NSView
{
    double _alpha;
}

- (void)drawRect:(struct CGRect)arg1;
- (void)setAlpha:(double)arg1;
- (BOOL)isOpaque;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface _IDEProgressSearchSuggestionsTableView : NSTableView
{
}

- (void)highlightSelectionInClipRect:(struct CGRect)arg1;

@end

@interface _IDEProgressSearchSuggestionsNoHighlightDrawCell : NSTextFieldCell
{
}

- (id)backgroundColor;
- (id)highlightColorWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface _IDEProgressSearchFieldCell : DVTSearchFieldCell
{
    BOOL _addedActionImage;
}

@end

@interface IDEBatchFindStrategiesController : DVTViewController
{
    NSPanel *_locationEditorPanel;
    NSPopUpButton *_locationPopupButton;
    NSMenuItem *_customizeMenu;
    NSImageView *_topShadow;
    DVTBorderedView *_contentBorder;
    DVTReplacementView *_locationEditorContentView;
    NSArray *_customFindScope;
    IDEWorkspace *_workspace;
    NSString *_findScopeUUID;
    IDENavigableItemCoordinator *_navigableItemCoordinator;
    NSArray *_workspaceProjectItems;
    NSImage *_cachedWorkspaceIcon;
    NSString *_cachedWorkspacePathDescription;
    NSString *_findWorkspacePath;
    int _findType;
    int _matchStyle;
    BOOL _ignoresCase;
    BOOL _searchFrameworks;
}

+ (id)scopeImage;
+ (void)initialize;
+ (id)sharedStrategiesController;
+ (void)setDefaultSearchFrameworks:(BOOL)arg1;
+ (BOOL)defaultSearchFrameworks;
+ (void)setDefaultFindWorkspacePath:(id)arg1;
+ (id)defaultFindWorkspacePath;
+ (void)setDefaultFindType:(int)arg1;
+ (int)defaultFindType;
+ (void)setDefaultFindScopeUUID:(id)arg1;
+ (id)defaultFindScopeUUID;
+ (void)setDefaultIgnoresCase:(BOOL)arg1;
+ (BOOL)defaultIgnoresCase;
+ (void)setDefaultMatchStyle:(int)arg1;
+ (int)defaultMatchStyle;
@property BOOL searchFrameworks; // @synthesize searchFrameworks=_searchFrameworks;
@property(copy) NSString *findWorkspacePath; // @synthesize findWorkspacePath=_findWorkspacePath;
@property(copy) NSString *findScopeUUID; // @synthesize findScopeUUID=_findScopeUUID;
@property BOOL ignoresCase; // @synthesize ignoresCase=_ignoresCase;
@property int matchStyle; // @synthesize matchStyle=_matchStyle;
@property int findType; // @synthesize findType=_findType;
- (void)_updateCustomScopeSelection;
- (void)_updateFindScopeMenu;
- (void)_appendCustomScopesToMenu:(id)arg1;
- (void)_appendWorkspaceProjectItemsToMenu:(id)arg1;
- (void)_addItemsFromNavigable:(id)arg1 toArray:(id)arg2 forPath:(id)arg3 withDepth:(long long)arg4;
- (id)_typesToTraverse;
- (id)_typesToInclude;
- (id)_menuItemForNavigable:(id)arg1 withPath:(id)arg2 withDepth:(long long)arg3;
- (void)_workspacePathSelected:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (id)descriptionForCriteriaForString:(id)arg1;
@property(readonly) NSString *customWorkspacePathDescription;
@property(readonly) NSString *customScopeDescription;
- (void)setParametersFromCriteria:(id)arg1;
- (id)findCriteriaForString:(id)arg1 error:(id *)arg2;
- (id)_predicateForScope;
- (BOOL)_findScopeUUIDValid:(id)arg1;
- (void)doneLocationEditor:(id)arg1;
- (void)selectScopeFromMenu:(id)arg1;
- (void)showScopeEditor:(id)arg1;
- (void)viewWillUninstall;
- (void)viewDidInstall;
- (void)loadView;
- (void)_loadDefaultValues;
- (id)initWithWorkspace:(id)arg1;

@end

@interface IDEBatchFindScopeEditor : IDEViewController <IDEBatchFindScopeRuleRowDelegate, IDEBatchFindRuleEditorDelegate, NSTableViewDelegate>
{
    NSArrayController *searchPredicateController;
    DVTBorderedView *_tableBorderView;
    DVTBorderedView *_scrollBorderView;
    DVTBorderedView *_ruleEditorBorderView;
    id selectionObserverToken;
    DVTStackView *contentView;
    NSRuleEditor *ruleEditor;
    NSArray *_topLevelRows;
    NSArray *_workspaceMenuItems;
    BOOL _dontRespondToEditorChange;
    BOOL _addingNewCompoundRow;
    IDEBatchFindScopePredicate *_invalidScope;
}

+ (id)fileTypeTitles;
+ (id)fileTypes;
@property(copy) NSArray *workspaceMenuItems; // @synthesize workspaceMenuItems=_workspaceMenuItems;
- (void)ruleEditorRowsDidChange:(id)arg1;
- (void)_checkRules;
- (void)_commitChanges;
- (void)revertScope:(id)arg1 toPredicate:(id)arg2;
- (void)ruleRow:(id)arg1 changedDisplayValue:(id)arg2;
- (BOOL)ruleEditor:(id)arg1 shouldAddRowOfType:(unsigned long long)arg2;
- (id)ruleEditor:(id)arg1 displayValueForCriterion:(id)arg2 inRow:(long long)arg3;
- (id)ruleEditor:(id)arg1 child:(long long)arg2 forCriterion:(id)arg3 withRowType:(unsigned long long)arg4;
- (long long)ruleEditor:(id)arg1 numberOfChildrenForCriterion:(id)arg2 withRowType:(unsigned long long)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
@property NSPredicate *currentPredicate;
- (id)_predicateForRow:(long long)arg1;
- (id)_compoundPredicateForRows:(id)arg1 forType:(unsigned long long)arg2;
- (id)_predicateForRowCriterion:(id)arg1;
- (id)_topLevelRows;
- (void)deleteScope:(id)arg1;
- (void)addScope:(id)arg1;
- (void)_deleteScope:(id)arg1;
- (void)_addScope:(id)arg1 atIndex:(long long)arg2;
@property IDEBatchFindScopePredicate *selectedScope;
@property(copy) NSArray *scopePredicates;
- (void)checkRulesAndCommit;
- (void)viewWillUninstall;
- (id)scopeImage;
- (void)loadView;

@end

@interface IDEBatchFindScopePredicate : NSObject
{
    NSString *_name;
    NSString *_uuid;
    NSPredicate *_predicate;
    BOOL _hasUnsavedChanged;
    BOOL _hasUnsupportedArchiveData;
}

+ (id)readPredicatesForWorkspace:(id)arg1;
+ (id)_archivedScopesFromData:(id)arg1;
+ (void)writePredicates:(id)arg1 forWorkspace:(id)arg2;
+ (id)_archivablePredicateData:(id)arg1;
@property BOOL hasUnsavedChanged; // @synthesize hasUnsavedChanged=_hasUnsavedChanged;
@property(copy) NSPredicate *predicate; // @synthesize predicate=_predicate;
@property(copy) NSString *uuid; // @synthesize uuid=_uuid;
@property(copy) NSString *name; // @synthesize name=_name;
@property(readonly) BOOL workspaceSpecific;
- (BOOL)_predicateContainsLocationSpecificExpression:(id)arg1;
- (void)setPredicateFromUTF8String:(const char *)arg1 fromXMLUnarchiver:(id)arg2;
- (void)dvt_encodeAttributesWithXMLArchiver:(id)arg1;
- (id)initFromXMLUnarchiver:(id)arg1 archiveVersion:(float)arg2;

@end

@interface _IDEBatchFindScopeArchive : NSObject
{
    NSMutableArray *_unarchivedScopes;
}

@property(readonly) NSArray *unarchivedScopes; // @synthesize unarchivedScopes=_unarchivedScopes;
- (void)addScope:(id)arg1 fromXMLUnarchiver:(id)arg2;

@end

@interface _IDEBatchFindPrivateClassForFindingBundle : NSObject
{
}

@end

@interface IDEBatchFindCandidateFile : NSObject
{
    IDEFileReference *_fileReference;
    DVTFilePath *_filePath;
    DVTFileDataType *_dataType;
    NSString *_groupTitle;
    BOOL _inLinkedFramework;
    id <DVTObservingToken> _fileReferenceObservingToken;
}

@property(readonly) BOOL inLinkedFramework; // @synthesize inLinkedFramework=_inLinkedFramework;
@property(readonly) NSString *groupTitle; // @synthesize groupTitle=_groupTitle;
@property(readonly) DVTFilePath *filePath; // @synthesize filePath=_filePath;
@property(readonly) IDEFileReference *fileReference; // @synthesize fileReference=_fileReference;
- (id)_generateGroupTitleForPath:(id)arg1 isInFramework:(char *)arg2;
- (id)_majorContainerForContainer:(id)arg1 isFramework:(char *)arg2;
- (long long)compare:(id)arg1;
@property(readonly) DVTFileDataType *dataType; // @synthesize dataType=_dataType;
@property(readonly) NSString *pathExtension;
@property(readonly) NSString *name;
@property(readonly) NSString *path;
- (id)description;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithPath:(id)arg1 fromSearchPath:(id)arg2;
- (id)initWithFileReference:(id)arg1;

@end

@interface IDEBatchFindTextQuery : IDEBatchFindQuery
{
    DVTDispatchLock *_statusLock;
    DVTDispatchLock *_resultLock;
    NSMutableArray *_queuedOperations;
    NSMutableArray *_queuedResults;
    unsigned long long _totalFilesSearched;
    unsigned long long _totalFilesCompleted;
    unsigned long long _filesRequiringMainThread;
    DVTOperation *_findFilesOperation;
}

- (void)_checkForEndStateOnMainThread;
- (void)_startFileFinderOperation;
- (void)_buildAndQueueFindableOnMainThreadForFileRef:(id)arg1;
- (void)_findOperationOnFindableComplete:(id)arg1 failure:(BOOL)arg2;
- (void)setState:(int)arg1;
- (void)start;
- (id)initWithSearchCriteria:(id)arg1 forWorkspace:(id)arg2 inController:(id)arg3;

// Remaining properties
@property(readonly) IDEBatchFindTextualFindCriteria *criteria; // @dynamic criteria;

@end

@interface IDEBatchFindTextualFindCriteria : IDEBatchFindCriteria
{
    NSArray *_searchLocations;
    NSPredicate *_filterPredicate;
    BOOL _searchFrameworks;
    IDEWorkspace *_workspace;
    NSMutableArray *_invalidLocationPaths;
    IDEBatchFindStrategiesController *_strategiesController;
}

+ (id)_predicateForComparisonPredicate:(id)arg1;
+ (id)_substituteGenericPredicate:(id)arg1;
+ (BOOL)_isLocationPredicate:(id)arg1;
+ (id)_builtInFileFilter;
@property(readonly) BOOL searchFrameworks; // @synthesize searchFrameworks=_searchFrameworks;
@property(readonly) NSArray *searchLocations; // @synthesize searchLocations=_searchLocations;
@property(readonly) NSPredicate *filterPredicate; // @synthesize filterPredicate=_filterPredicate;
- (id)_extractLocationsFromTopLevelPredicate:(id)arg1;
- (id)_locatorFromLocationPredicate:(id)arg1 withCriteriaPredicate:(id)arg2;
- (void)_addUnresolvedContainerItemPath:(id)arg1;
- (id)matchingFileOperationForWorkspace:(id)arg1 withResultBlock:(id)arg2;
- (id)description;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithFindDescriptor:(id)arg1 frameworks:(BOOL)arg2 andFilterPredicate:(id)arg3 workspace:(id)arg4 strategiesController:(id)arg5;
- (void)_reportInvalidLocationPaths;
- (void)_batchFindInvalidScopeSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)_showScopeEditor;

@end

@interface IDEBatchFindResult : NSObject
{
    DVTFindResult *_findResult;
    struct _NSRange _wholeWordRange;
    BOOL _wholeWordCalculated;
    IDEIndexSymbol *_symbol;
    IDEBatchFindCandidateFile *_foundInFile;
    BOOL _backingFileChangedOnDisk;
}

+ (id)keyPathsForValuesAffectingDisplayImage;
+ (void)initialize;
@property BOOL backingFileChangedOnDisk; // @synthesize backingFileChangedOnDisk=_backingFileChangedOnDisk;
@property IDEIndexSymbol *symbol; // @synthesize symbol=_symbol;
@property(readonly) IDEBatchFindCandidateFile *foundInFile; // @synthesize foundInFile=_foundInFile;
@property(readonly) DVTFindResult *findResult; // @synthesize findResult=_findResult;
@property(readonly) NSImage *statusImage;
@property(readonly) NSImage *displayImage;
@property(readonly) struct _NSRange displayFocusRange;
@property(readonly) NSString *displayTitle;
@property(readonly) struct _NSRange matchRange;
@property(readonly) struct _NSRange symbolRange;
@property(readonly) NSString *wholeWordMatch;
@property(readonly) struct _NSRange wholeWordRange;
@property(readonly, getter=isReplaceable) BOOL replacable;
- (BOOL)hasSymbol;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithResult:(id)arg1 foundInFile:(id)arg2;
- (id)ideModelObjectTypeIdentifier;
- (id)navigableItem_documentType;
- (id)navigableItem_contentDocumentLocation;
- (id)navigableItem_image;
- (id)navigableItem_name;

@end

@interface IDEBatchFindCommands : NSObject <IDECommandHandlerVendor, IDECommandHandler>
{
    id <IDESelectionSource> _selectionSource;
}

+ (id)_selectedTextInWindow:(id)arg1;
+ (id)handlerForAction:(SEL)arg1 withSelectionSource:(id)arg2;
+ (BOOL)_isValidForAction:(SEL)arg1 withSelectionSource:(id)arg2;
@property(readonly) id <IDESelectionSource> selectionSource; // @synthesize selectionSource=_selectionSource;
- (void)findAndReplaceInWorkspace:(id)arg1;
- (void)findSelectedTextInWorkspace:(id)arg1;
- (void)findInWorkspace:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (id)_initWithSelectionSource:(id)arg1;

@end

@interface IDEProgressSearchSuggestionItem : NSObject
{
    NSString *_title;
    NSString *_titleFormat;
    long long _tag;
    id _representedObject;
    BOOL _isHeader;
    BOOL _isSeparatorItem;
    BOOL _isHidden;
    id _actionBlock;
    NSString *_subtitle;
}

+ (id)headerWithTitle:(id)arg1;
+ (id)separatorItem;
@property BOOL isHidden; // @synthesize isHidden=_isHidden;
@property BOOL isSeparatorItem; // @synthesize isSeparatorItem=_isSeparatorItem;
@property BOOL isHeader; // @synthesize isHeader=_isHeader;
@property id representedObject; // @synthesize representedObject=_representedObject;
@property long long tag; // @synthesize tag=_tag;
@property(copy) id actionBlock; // @synthesize actionBlock=_actionBlock;
@property(copy) NSString *subtitle; // @synthesize subtitle=_subtitle;
@property(copy) NSString *titleFormat; // @synthesize titleFormat=_titleFormat;
@property(copy) NSString *title; // @synthesize title=_title;
- (id)initWithTitle:(id)arg1;
- (id)initWithTitleFormat:(id)arg1;

@end

@interface IDEBatchFindReplacePreviewController : IDEViewController <DVTDynamicTableViewDataSource, DVTDynamicTableViewDelegate, NSSplitViewDelegate, NSCacheDelegate>
{
    DVTReplacementView *_resultsReplacementView;
    NSArray *_orderedGroupNavigables;
    NSMapTable *_previewProviderByGroupNavigable;
    NSMapTable *_rowViewObserverMapTable;
    NSCache *_rowViewCache;
    NSString *_replaceString;
    DVTDynamicTableView *_dynamicTableView;
    DVTBorderedView *_bottomBorder;
    NSMapTable *_disclosedTokenMapTable;
    id <DVTObservingToken> _resultSetWatcher;
    id <DVTObservingToken> _checkedResultsWatcher;
    id <DVTObservingToken> _selectionWatcher;
    BOOL _viewFirstLayedOut;
    BOOL _hasSelectedItems;
    BOOL _isViewReadyToPopulateTable;
    IDEBatchFindNavigator *_findNavigator;
    DVTPerformanceMetric *_rebuildSectionsPerfMetric;
    NSMutableIndexSet *_visibleRowIndexes;
}

+ (id)logAspect;
+ (Class)_previewClassForType:(id)arg1;
+ (id)_orderedPreviewExtensionsSupportingType:(id)arg1;
+ (id)_allPreviewExtensions;
+ (void)initialize;
@property IDEBatchFindNavigator *findNavigator; // @synthesize findNavigator=_findNavigator;
@property BOOL hasSelectedItems; // @synthesize hasSelectedItems=_hasSelectedItems;
@property NSMapTable *disclosedTokenMapTable; // @synthesize disclosedTokenMapTable=_disclosedTokenMapTable;
@property DVTBorderedView *bottomBorder; // @synthesize bottomBorder=_bottomBorder;
@property DVTDynamicTableView *dynamicTableView; // @synthesize dynamicTableView=_dynamicTableView;
@property DVTReplacementView *resultsReplacementView; // @synthesize resultsReplacementView=_resultsReplacementView;
@property NSString *replaceString; // @synthesize replaceString=_replaceString;
- (void)_setupMiniNavigator;
- (void)cache:(id)arg1 willEvictObject:(id)arg2;
- (long long)dynamicTableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (long long)numberOfSectionsInDynamicTableView:(id)arg1;
- (double)dynamicTableView:(id)arg1 heightForHeaderInSection:(long long)arg2;
- (id)dynamicTableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (double)dynamicTableView:(id)arg1 heightForRow:(long long)arg2 inSection:(long long)arg3;
- (id)dynamicTableView:(id)arg1 viewForRow:(long long)arg2 inSection:(long long)arg3;
- (void)dynamicTableView:(id)arg1 didRemoveRowView:(id)arg2 forRow:(long long)arg3 inSection:(long long)arg4;
- (void)dynamicTableView:(id)arg1 didAddRowView:(id)arg2 forRow:(long long)arg3 inSection:(long long)arg4;
- (void)_updatePreviewsSelection;
- (void)_updatePreviewSelection:(id)arg1;
- (void)_rebuildSections;
- (void)_updateRowSelectionForProvider:(id)arg1 forSectionIndex:(long long)arg2;
- (void)updateBoundReplaceString;
- (id)dvtExtraBindings;
- (void)_scrollNavigableVisible:(id)arg1;
@property(copy) NSSet *resultNavigablesToReplace;
@property IDEBatchFindResultSet *resultSet;
@property(readonly) IDEBatchFindResultsOutlineController *resultsOutlineController;
@property(getter=isViewReadyToPopulateTable) BOOL viewIsReadyToPopulateTable;
- (void)invalidate;
- (void)layoutComplete;
- (void)viewDidInstall;
- (void)loadView;

@end

@interface IDEDummyFindReplacePreviewProvider : IDEEditorDocumentPreviewProvider
{
    NSLayoutManager *_heightLayoutManager;
}

- (double)minimumHeightForRowAtIndex:(long long)arg1 withWidth:(double)arg2;
- (id)generateViewWithRect:(struct CGRect)arg1;
- (void)populateView:(id)arg1 forPreviewAtIndex:(long long)arg2;
- (void)populateView:(id)arg1 forDocumentAtIndex:(long long)arg2;
- (void)_clipTextToCenter:(id)arg1 focusRange:(struct _NSRange)arg2;
- (void)updateSelectedLocation:(id)arg1 forView:(id)arg2 atIndex:(long long)arg3 preview:(BOOL)arg4;
- (id)_defaultTextAttributes;
- (id)_resultAtIndex:(long long)arg1;
- (id)previewViewIdentifier;
- (id)preview;
- (id)document;

@end

@interface IDEBatchFindFileLocator : NSObject
{
    NSString *_path;
    NSPredicate *_predicate;
}

@property(readonly) NSPredicate *predicate; // @synthesize predicate=_predicate;
@property(readonly) NSString *path; // @synthesize path=_path;
- (id)locationOperationForWorkspace:(id)arg1 withResultsBlock:(id)arg2;
@property(readonly) BOOL requiresMainThread;
- (id)initWithPath:(id)arg1 andPredicate:(id)arg2;

@end

@interface IDEBatchFindWorkspaceFileLocator : IDEBatchFindFileLocator
{
    BOOL _skipFrameworks;
}

+ (id)_containerForPath:(id)arg1 inGroup:(id)arg2;
+ (id)containerItemForWorkspacePath:(id)arg1 inWorkspace:(id)arg2;
- (id)locationOperationForWorkspace:(id)arg1 withResultsBlock:(id)arg2;
- (BOOL)requiresMainThread;
- (id)initWithPath:(id)arg1 skippingLinkedFrameworks:(BOOL)arg2 andPredicate:(id)arg3;

@end

@interface IDEBatchFindFileSystemLocator : IDEBatchFindFileLocator
{
}

- (id)locationOperationForWorkspace:(id)arg1 withResultsBlock:(id)arg2;
- (BOOL)requiresMainThread;

@end

@interface IDEBatchFindScopeRuleRow : NSObject <NSCopying>
{
    id <IDEBatchFindScopeRuleRowDelegate> _delegate;
}

@property id <IDEBatchFindScopeRuleRowDelegate> delegate; // @synthesize delegate=_delegate;
- (id)criteriaNodesForMatchingPredicate:(id)arg1;
- (id)predicateForIndexPath:(id)arg1;
- (id)displayValueForPath:(id)arg1;
- (long long)childCountForIndexPath:(id)arg1;
- (void)rowChanged:(id)arg1;
- (void)_delayedChangedDisplayValue:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface IDEBatchFindRuleEditor : NSRuleEditor
{
}

- (void)_addOptionFromSlice:(id)arg1 ofRowType:(unsigned long long)arg2;

@end

@interface IDEBatchFindScopeTextStaticRow : IDEBatchFindScopeRuleRow
{
    NSArray *_displayValues;
    NSArray *_predicateValues;
    NSTextField *_textField;
}

+ (id)_displayStringForComparisonType:(unsigned long long)arg1;
@property(readonly) NSString *rhsPredicateValue;
@property(readonly) NSTextField *rhsDisplayView;
@property(readonly) NSArray *comparisonPredicateValues;
@property(readonly) NSArray *comparisonDisplayValues;
@property(readonly) NSString *lhsPredicateValue;
@property(readonly) NSString *lhsDisplayValue;
- (id)criteriaNodesForMatchingPredicate:(id)arg1;
- (id)predicateForIndexPath:(id)arg1;
- (unsigned long long)_operatorTypeForComparisonAtIndex:(long long)arg1;
- (id)displayValueForPath:(id)arg1;
- (long long)childCountForIndexPath:(id)arg1;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithLHSDisplayValue:(id)arg1 lhsPredicateValue:(id)arg2 andComparisonTypes:(id)arg3;

@end

@interface IDEBatchFindScopeFileTypeRow : IDEBatchFindScopeRuleRow
{
    NSArray *_types;
    NSArray *_typeTitles;
    NSTextField *_otherTextField;
}

@property(readonly) NSArray *typeTitles; // @synthesize typeTitles=_typeTitles;
@property(readonly) NSArray *types; // @synthesize types=_types;
- (id)criteriaNodesForMatchingPredicate:(id)arg1;
- (id)predicateForIndexPath:(id)arg1;
- (id)displayValueForPath:(id)arg1;
- (long long)childCountForIndexPath:(id)arg1;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithFileTypes:(id)arg1 andTypeTitles:(id)arg2;

@end

@interface IDEBatchFindScopeLocationRow : IDEBatchFindScopeRuleRow
{
    NSArray *_workspaceMenuItems;
    NSPopUpButton *_locationPopup;
    NSPathControl *_otherPathControl;
}

@property(readonly) NSArray *workspaceMenuItems; // @synthesize workspaceMenuItems=_workspaceMenuItems;
- (void)pathControl:(id)arg1 willDisplayOpenPanel:(id)arg2;
- (void)_buildLocationPopupSelectingItemMatchingPath:(id)arg1;
- (void)_selectWorkspacePath:(id)arg1;
- (id)criteriaNodesForMatchingPredicate:(id)arg1;
- (id)predicateForIndexPath:(id)arg1;
- (id)displayValueForPath:(id)arg1;
- (long long)childCountForIndexPath:(id)arg1;
- (BOOL)hasProjectPathsToSelect;
- (void)rowChanged:(id)arg1;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithWorkspaceMenuItems:(id)arg1;

@end

@interface IDEBatchFindScopeRuleNode : NSObject
{
    IDEBatchFindScopeRuleRow *_row;
    NSIndexPath *_indexPath;
}

+ (id)nodeArrayForIndexPath:(id)arg1 inRow:(id)arg2;
+ (id)nodeForIndexPath:(id)arg1 inRow:(id)arg2;
@property(readonly) NSIndexPath *indexPath; // @synthesize indexPath=_indexPath;
@property(readonly) IDEBatchFindScopeRuleRow *row; // @synthesize row=_row;
- (id)childAtIndex:(long long)arg1;
@property(readonly) long long childCount;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithPath:(id)arg1 inRow:(id)arg2;

@end

@interface IDEBatchFindActivityReporter : IDEActivityReporter
{
    NSMapTable *_queryToObservers;
    id _queryCreationObserer;
}

+ (void)initialize;
- (void)_observerQuery:(id)arg1 inWorkspace:(id)arg2;
- (id)initWithWorkspace:(id)arg1;

@end

@interface IDEBatchFindResultSet : NSObject <NSCopying>
{
    IDEBatchFindCriteria *_criteria;
    NSMutableArray *_resultGroups;
    NSMutableArray *_rawGroups;
    NSArray *_allResults;
    unsigned long long _replaceableCount;
    unsigned long long _replaceableGroupCount;
    unsigned long long _allResultsCount;
    BOOL _allResultsCounted;
    BOOL _wasReplacementOperationAttempted;
}

+ (id)keyPathsForValuesAffectingHasResults;
+ (void)initialize;
@property BOOL wasReplacementOperationAttempted; // @synthesize wasReplacementOperationAttempted=_wasReplacementOperationAttempted;
@property unsigned long long replaceableGroupCount; // @synthesize replaceableGroupCount=_replaceableGroupCount;
@property unsigned long long replaceableCount; // @synthesize replaceableCount=_replaceableCount;
@property(readonly) IDEBatchFindCriteria *criteria; // @synthesize criteria=_criteria;
- (void)resetHiddenResultGroups;
- (void)hideResultGroups:(id)arg1;
- (void)addResultGroup:(id)arg1;
- (void)addResultGroups:(id)arg1;
@property(readonly) BOOL hasResults;
- (void)invalidateAllResultsCount;
@property(readonly) long long allResultsCount;
@property(readonly) NSArray *allResults;
@property(readonly) NSString *searchString;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCriteria:(id)arg1;
- (id)ideModelObjectTypeIdentifier;
- (id)navigableItem_image;
- (id)navigableItem_name;

// Remaining properties
@property(readonly) NSMutableArray *mutableResultGroups; // @dynamic mutableResultGroups;
@property(readonly) NSArray *resultGroups; // @dynamic resultGroups;

@end

@interface IDEBatchFindStatusCell : NSActionCell
{
}

- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGSize)cellSizeForBounds:(struct CGRect)arg1;

@end

@interface IDEBatchFindReplacePreviewContainerView : DVTAutoLayoutView
{
    IDEBatchFindReplacePreviewController *_controller;
}

- (void)didCompleteLayout;

@end

@interface IDEBatchFindReplaceableSheetController : NSWindowController
{
    DVTBorderedView *_borderView;
    DVTReplacementView *_contentView;
    NSButton *_defaultButton;
    NSButton *_cancelButton;
    IDEWorkspaceTabController *_workspaceTabController;
    id _sheetCompletionBlock;
    IDEBatchFindReplacePreviewController *_previewController;
}

@property(readonly) IDEWorkspaceTabController *workspaceTabController; // @synthesize workspaceTabController=_workspaceTabController;
- (void)cancel:(id)arg1;
- (void)done:(id)arg1;
- (void)beginSheetForReplaceController:(id)arg1 withCompletionBlock:(id)arg2;
- (void)sheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
@property(readonly) BOOL isSheetBeingShown;
@property(copy) NSString *cancelButtonTitle;
@property(copy) NSString *defaultButtonTitle;
@property(readonly) DVTReplacementView *contentView;
- (void)windowDidLoad;
- (id)windowNibName;
- (id)initForWorkspaceTabController:(id)arg1;

@end

@interface IDEBatchFindResultsOutlineController : IDEViewController <IDENavigableItemCoordinatorDelegate>
{
    IDENavigatorOutlineView *_outlineView;
    NSTableColumn *_checkTableColumn;
    NSTableColumn *_mainTableColumn;
    double _statusCellHeight;
    NSMutableArray *_observerTokens;
    NSArray *_selectedObjects;
    NSArray *_selectedResultNavigables;
    NSIndexSet *_previousSelection;
    NSSet *_checkedResultNavigables;
    NSSet *_checkedResultNavigablesForReplacement;
    IDEBatchFindResultSet *_resultSet;
    IDENavigableItemCoordinator *_navigableItemCoordinator;
    IDENavigableItem *_resultsNavigable;
    NSHashTable *_groupResultsSymbolObservers;
    double _lastOutlineUpdate;
    NSMutableSet *_collapsedItems;
    NSMutableSet *_groupsExpandedNeedingSelectionChange;
    BOOL _dontPublishSelectionChanges;
    BOOL _showsStatusImage;
    BOOL _allowsDelete;
    BOOL _showsCheckedRow;
    BOOL _symbolLookupEnabled;
    BOOL _isShowingPreview;
}

+ (id)keyPathsForValuesAffectingSelectedResultNavigables;
+ (id)keyPathsForValuesAffectingRootNavigables;
+ (id)keyPathsForValuesAffectingResultsNavigable;
+ (id)resultPrototypeCell;
+ (id)groupPrototypeCell;
+ (id)groupStatusPrototypeCells;
+ (void)initialize;
@property BOOL isShowingPreview; // @synthesize isShowingPreview=_isShowingPreview;
@property BOOL symbolLookupEnabled; // @synthesize symbolLookupEnabled=_symbolLookupEnabled;
@property NSSet *checkedResultNavigables; // @synthesize checkedResultNavigables=_checkedResultNavigables;
@property BOOL showsCheckedRow; // @synthesize showsCheckedRow=_showsCheckedRow;
@property BOOL dontPublishSelectionChanges; // @synthesize dontPublishSelectionChanges=_dontPublishSelectionChanges;
@property(readonly) IDENavigableItemCoordinator *navigableItemCoordinator; // @synthesize navigableItemCoordinator=_navigableItemCoordinator;
@property NSArray *selectedResultNavigables; // @synthesize selectedResultNavigables=_selectedResultNavigables;
@property NSArray *selectedObjects; // @synthesize selectedObjects=_selectedObjects;
@property IDEBatchFindResultSet *resultSet; // @synthesize resultSet=_resultSet;
@property BOOL allowsDelete; // @synthesize allowsDelete=_allowsDelete;
@property BOOL showsStatusImage; // @synthesize showsStatusImage=_showsStatusImage;
- (BOOL)outlineView:(id)arg1 shouldSelectItem:(id)arg2;
- (id)outlineView:(id)arg1 selectionIndexesForProposedSelection:(id)arg2;
- (void)outlineViewItemDidExpand:(id)arg1;
- (void)_delayedSelectionOfExpandedChildren;
- (void)outlineViewItemDidCollapse:(id)arg1;
- (unsigned long long)outlineView:(id)arg1 draggingSourceOperationMaskForLocal:(BOOL)arg2;
- (BOOL)outlineView:(id)arg1 insertText:(id)arg2;
- (BOOL)outlineView:(id)arg1 doCommandBySelector:(SEL)arg2;
- (id)outlineView:(id)arg1 dataCellForTableColumn:(id)arg2 item:(id)arg3;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (BOOL)outlineView:(id)arg1 isGroupHeaderItem:(id)arg2;
- (void)outlineView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 byItem:(id)arg4;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 shouldShowCellExpansionForTableColumn:(id)arg2 item:(id)arg3;
- (id)outlineView:(id)arg1 toolTipForCell:(id)arg2 rect:(struct CGRect *)arg3 tableColumn:(id)arg4 item:(id)arg5 mouseLocation:(struct CGPoint)arg6;
- (void)_requestOutlineUpdate:(BOOL)arg1;
- (void)_refreshOutline;
- (void)_expandItems;
@property NSIndexSet *selectedRowIndexes;
@property NSIndexSet *collapsedGroups;
- (void)delete:(id)arg1;
- (void)openDoubleClickedNavigableItemsAction:(id)arg1;
- (void)openClickedNavigableItemAction:(id)arg1;
- (void)openSelectedNavigableItemsKeyAction:(id)arg1;
- (id)openSpecifierForNavigableItem:(id)arg1 error:(id *)arg2;
@property(readonly) IDENavigatorOutlineView *outlineView;
@property(copy) NSString *noResultsString;
@property(readonly) NSSet *checkedResultNavigablesForReplacement;
- (void)selectAllResults;
@property(readonly) NSArray *rootNavigables;
- (id)domainIdentifier;
- (id)resultsNavigable;
- (void)_setupObservers;
- (void)updateBatchFindResults;
- (void)filterResultsWithPredicate:(id)arg1;
- (void)reload;
- (id)dvtExtraBindings;
- (BOOL)delegateFirstResponder;
- (void)invalidate;
- (void)loadView;

@end

@interface IDEBatchFindReplaceButtonLayoutView : DVTAutoLayoutView
{
    NSButton *replaceAllButton;
    NSButton *replaceSelectedButton;
    NSButton *previewButton;
    BOOL _sizesCondensed;
    BOOL _marginsCondensed;
    BOOL _replaceAllCondensed;
    double replaceAllOriginalWidth;
    double previewOriginalWidth;
}

- (void)layoutBottomUp;
- (void)layoutTopDown;
- (void)awakeFromNib;

@end

@interface IDEBatchFindRawTextLineLocationFinder : NSObject
{
    DVTMutableRangeArray *_lineStartLocationRanges;
}

- (void)noteLinesInString:(id)arg1 throughRange:(struct _NSRange)arg2 completionBlock:(id)arg3;
- (long long)_lineForLocation:(long long)arg1 withColumn:(long long *)arg2;
- (void)invalidate;

@end

