/*
 *     Generated by class-dump 3.3.3 (64 bit) (Debug version compiled Aug 11 2011 13:55:57).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark Named Structures

struct NSObject {
    Class _field1;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

#pragma mark -

/*
 * File: /Developer/Library/Xcode/PrivatePlugIns/DebuggerFoundation.ideplugin/Contents/MacOS/DebuggerFoundation
 * UUID: DAA1807A-27FA-3DB1-AF31-E50681DE72EE
 * Arch: Intel x86-64 (x86_64)
 *       Current version: 569.0.0, Compatibility version: 1.0.0
 *       Minimum Mac OS X version: 10.7.0
 *
 *       Objective-C Garbage Collection: Required
 */

@protocol DBGLazyObservableDictionaryDelegate <NSObject>
- (id)valueForKey:(id)arg1 forLazyDictionary:(id)arg2;
@end

@protocol IDEDataValue <NSObject>
@property(readonly) BOOL childValuesCountValid;
@property(readonly) NSArray *childValues;
@property(readonly) BOOL hasChildValues;
@property(readonly) BOOL inScope;
@property(readonly) BOOL formattedSummaryHasChanged;
@property(readonly) NSString *formattedSummary;
@property(readonly) BOOL typeHasChanged;
@property(readonly) NSString *type;
@property(readonly) BOOL valueHasChanged;
@property(readonly) BOOL isValueEditable;
@property(copy) NSString *value;
@property(readonly) NSString *name;
@end

@protocol IDEDebugCompressionStrategy <NSObject>
+ (id)genericMaskFilePathWithColorsInRed:(double *)arg1 green:(double *)arg2 blue:(double *)arg3 alpha:(double *)arg4;
+ (id)maskFilePathForUserCodeWithColorsInRed:(double *)arg1 green:(double *)arg2 blue:(double *)arg3 alpha:(double *)arg4;
+ (id)maskFilePathForModulePathString:(id)arg1 withColorsInRed:(double *)arg2 green:(double *)arg3 blue:(double *)arg4 alpha:(double *)arg5;
- (id)compressStackFrames:(id)arg1 level:(unsigned long long)arg2;
@end

@protocol IDEDebugNavigableModel <NSObject>
@property(readonly) NSString *associatedProcessUUID;
@end

@protocol IDEDebugProcess <IDEDebugNavigableModel>
@property(copy) NSString *name;
- (id)contentDelegateUIExtensionIdentifier;
@end

@protocol IDEDebugSession <NSObject>
@property(readonly) NSMutableArray *loadedSharedLibraries;
@property(readonly) BOOL breakpointsActivated;
@property(readonly) id <IDEDebugProcess> process;
@property(readonly) int coalescedState;
@property int state;
- (BOOL)canContinueToLocation:(id)arg1 withinBlockAtRange:(struct _NSRange)arg2;
- (BOOL)consoleShouldTrackInputHistory;
- (void)loadDebugSymbolsForSharedLibrary:(id)arg1;
- (BOOL)shouldAcceptFromDebugSession:(id)arg1 error:(id *)arg2;
- (BOOL)shouldRelinquishToDebugSession:(id)arg1 error:(id *)arg2;
- (BOOL)debuggerSupportsPCDragging;
- (void)requestStop:(struct NSObject *)arg1;
- (void)requestContinueToLocation:(id)arg1 inContext:(struct NSObject *)arg2;
- (void)requestContinue:(struct NSObject *)arg1;
- (void)requestPause:(struct NSObject *)arg1;
- (void)requestStepOverSuspendOtherThreads:(struct NSObject *)arg1;
- (void)requestStepInSuspendOtherThreads:(struct NSObject *)arg1;
- (void)requestStepOverInstruction:(struct NSObject *)arg1;
- (void)requestStepIntoInstruction:(struct NSObject *)arg1;
- (void)requestStepOut:(struct NSObject *)arg1;
- (void)requestStepOverLine:(struct NSObject *)arg1;
- (void)requestStepIn:(struct NSObject *)arg1;
@end

@protocol NSObject
- (id)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
@end

@interface DBGDebugSession : NSObject <IDEDebugSession>
{
    IDELaunchSession *_launchSession;
    IDERunOperationWorker *_debugLauncher;
    int _state;
    int _coalescedState;
    DBGProcess *_targetProcess;
    BOOL _hasExitCode;
    long long _exitCode;
    BOOL _breakpointsActivated;
    id <DBGDebugSessionBreakpointDelegate> _breakpointDelegate;
    id <DBGDebugSessionBreakpointLocationDelegate> _breakpointLocationDelegate;
    id <DVTObservingToken> _breakpointListObserverToken;
    NSMapTable *_breakpointsToTokens;
    DVTTextDocumentLocation *_instructionPointerLocation;
    DVTTextDocumentLocation *_instructionPointerLocationForDisassembly;
    BOOL _lazySymbolLoadingEnabled;
    BOOL _debuggerShouldAttachToTarget;
    IDEConsoleAdaptor *_debuggerConsoleAdapter;
    NSMutableArray *_loadedSharedLibraries;
    DBGDisassemblyEditorSupport *_disassemblyEditorSupport;
    NSMutableSet *_dataValuesObservers;
    NSError *_alertError;
}

+ (id)keyPathsForValuesAffectingBreakpointsActivated;
+ (id)keyPathsForValuesAffectingProcess;
+ (void)initialize;
@property(readonly) BOOL debuggerShouldAttachToTarget; // @synthesize debuggerShouldAttachToTarget=_debuggerShouldAttachToTarget;
@property(getter=isLazySymbolLoadingEnabled) BOOL lazySymbolLoadingEnabled; // @synthesize lazySymbolLoadingEnabled=_lazySymbolLoadingEnabled;
@property(readonly) DBGDisassemblyEditorSupport *disassemblyEditorSupport; // @synthesize disassemblyEditorSupport=_disassemblyEditorSupport;
@property(readonly) NSError *alertError; // @synthesize alertError=_alertError;
@property id <DBGDebugSessionBreakpointLocationDelegate> breakpointLocationDelegate; // @synthesize breakpointLocationDelegate=_breakpointLocationDelegate;
@property id <DBGDebugSessionBreakpointDelegate> breakpointDelegate; // @synthesize breakpointDelegate=_breakpointDelegate;
@property IDEConsoleAdaptor *debuggerConsoleAdaptor; // @synthesize debuggerConsoleAdaptor=_debuggerConsoleAdapter;
@property(copy) DVTTextDocumentLocation *instructionPointerLocationForDisassembly; // @synthesize instructionPointerLocationForDisassembly=_instructionPointerLocationForDisassembly;
@property(copy) DVTTextDocumentLocation *instructionPointerLocation; // @synthesize instructionPointerLocation=_instructionPointerLocation;
@property(readonly) IDERunOperationWorker *debugLauncher; // @synthesize debugLauncher=_debugLauncher;
@property(readonly) IDELaunchSession *launchSession; // @synthesize launchSession=_launchSession;
@property long long exitCode; // @synthesize exitCode=_exitCode;
@property BOOL hasExitCode; // @synthesize hasExitCode=_hasExitCode;
@property DBGProcess *targetProcess; // @synthesize targetProcess=_targetProcess;
@property int coalescedState; // @synthesize coalescedState=_coalescedState;
@property int state; // @synthesize state=_state;
- (BOOL)supportsWatchpoints;
- (BOOL)canContinueToLocation:(id)arg1 withinBlockAtRange:(struct _NSRange)arg2;
- (id)localizedStringForState:(int)arg1;
- (void)completeString:(id)arg1 resultHandler:(id)arg2;
- (void)alertMessage:(id)arg1 withTitle:(id)arg2;
- (void)requestPermissionForPoOfDataValue:(id)arg1;
- (void)deregisterDataValuesObserver:(id)arg1;
- (void)registerDataValuesObserver:(id)arg1;
@property(readonly) BOOL hasDataValuesObservers;
- (id)supportedDataValueFormatsForDataValue:(id)arg1;
- (BOOL)consoleShouldTrackInputHistory;
- (id)pathToInstrospectionSupportDyLib;
- (void)loadDebugSymbolsForSharedLibrary:(id)arg1;
- (BOOL)supportsMultiPC;
- (void)requestMovePCInStackFrame:(id)arg1 toLineNumber:(unsigned long long)arg2;
- (BOOL)debuggerSupportsPCDragging;
- (void)requestContinueToLocation:(id)arg1 inContext:(struct NSObject *)arg2;
- (void)requestStepIntoCallSymbol:(id)arg1 atLocation:(id)arg2 inContext:(struct NSObject *)arg3;
- (void)printDescriptionOfDataValueToConsole:(id)arg1 runAllThreads:(BOOL)arg2;
- (BOOL)shouldAcceptFromDebugSession:(id)arg1 error:(id *)arg2;
- (BOOL)shouldRelinquishToDebugSession:(id)arg1 error:(id *)arg2;
- (void)requestStepOverSuspendOtherThreads:(struct NSObject *)arg1;
- (void)requestStepInSuspendOtherThreads:(struct NSObject *)arg1;
- (void)requestStepOverInstruction:(struct NSObject *)arg1;
- (void)requestStepIntoInstruction:(struct NSObject *)arg1;
- (void)requestStop:(struct NSObject *)arg1;
- (void)requestContinue:(struct NSObject *)arg1;
- (void)requestPause:(struct NSObject *)arg1;
- (void)requestStepOut:(struct NSObject *)arg1;
- (void)requestStepOverLine:(struct NSObject *)arg1;
- (void)requestStepIn:(struct NSObject *)arg1;
- (void)_delayedSetState;
- (void)_recreateBreakpointIfNeccessary:(id)arg1;
- (void)_createBreakpointIfNeccessary:(id)arg1;
- (void)_handleTargetProcessStateChanged;
- (void)_handleLaunchSessionEnded;
- (void)_handleLaunchSessionStateChanged;
- (void)_handleLaunchSessionTargetOutputStateChanged;
- (void)_outputExitString;
- (void)_handleExceptionBreakpointStopOnStyleChanged:(id)arg1;
- (void)_handleExceptionBreakpointScopeChanged:(id)arg1;
- (void)_handleSymbolicBreakpointModuleNameChanged:(id)arg1;
- (void)_handleSymbolicBreakpointSymbolNameChanged:(id)arg1;
- (void)_handleFileBreakpointLocationChanged:(id)arg1;
- (void)_handleBreakpointIgnoreCountChanged:(id)arg1;
- (void)_handleBreakpointConditionChanged:(id)arg1;
- (void)_handleBreakpointEnablementChanged:(id)arg1;
- (void)_handleBreakpointActivationChanged;
- (void)_handleBreakpointLocationsRemoved:(id)arg1;
- (void)_handleBreakpointLocationsAdded:(id)arg1;
- (void)_handleBreakpointLocationChanges:(id)arg1;
- (void)_handleBreakpointsDeleted:(id)arg1;
- (void)_handleBreakpointsCreated:(id)arg1;
- (void)_handleBreakpointsListChanged:(id)arg1;
- (void)_removeBreakpointObservers:(id)arg1;
- (void)_addBreakpointObservers:(id)arg1;
@property(readonly) BOOL breakpointsActivated; // @synthesize breakpointsActivated=_breakpointsActivated;
@property(readonly) IDEBreakpointManager *breakpointManager;
@property(readonly) id <IDEDebugProcess> process;
- (void)cleanUp;
- (id)initWithDebugLauncher:(id)arg1;

// Remaining properties
@property(readonly) NSMutableArray *loadedSharedLibraries; // @dynamic loadedSharedLibraries;

@end

@interface DBGDisassemblyEditorSupport : NSObject
{
    NSMutableArray *_disassemblyFiles;
    NSMapTable *_framesToFiles;
    id <DBGDisassemblyEditorSupportDelegate> _delegate;
}

+ (void)_setFile:(id)arg1 immutable:(BOOL)arg2;
@property id <DBGDisassemblyEditorSupportDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_handleDebugSessionStateChanged:(id)arg1;
- (id)_createUniqueFileURLForFrame:(id)arg1;
- (id)disassemblyURLForFrame:(id)arg1;
- (id)_writeDisassemblyForFrame:(id)arg1 toFile:(id)arg2;
- (id)writeDisassembly:(id)arg1 toFileForFrame:(id)arg2;
- (id)initWithDebugSession:(id)arg1;

@end

@interface DBGProcess : NSObject <IDEDebugProcess>
{
    DBGDebugSession *_parentDebugSession;
    NSString *_associatedProcessUUID;
    int _controlState;
    NSArray *_threads;
    BOOL _threadsAutoRefreshStackFramesDone;
    NSMutableSet *_threadsAutoRefreshStackFrames;
    NSMutableSet *_codeModules;
    NSMutableDictionary *_codeModuleForPathTable;
    DBGThread *_currentThread;
    DBGStackFrame *_currentStackFrame;
    NSString *_name;
    int _PID;
    BOOL _usesPIDForPartOfName;
    NSMutableArray *_memoryDatas;
}

+ (id)keyPathsForValuesAffectingName;
+ (id)keyPathsForValuesAffectingThreads;
+ (void)initialize;
@property BOOL threadsAutoRefreshStackFramesDone; // @synthesize threadsAutoRefreshStackFramesDone=_threadsAutoRefreshStackFramesDone;
@property BOOL usesPIDForPartOfName; // @synthesize usesPIDForPartOfName=_usesPIDForPartOfName;
@property int PID; // @synthesize PID=_PID;
@property(copy) NSString *name; // @synthesize name=_name;
@property DBGStackFrame *currentStackFrame; // @synthesize currentStackFrame=_currentStackFrame;
@property DBGThread *currentThread; // @synthesize currentThread=_currentThread;
@property(copy) NSArray *threads; // @synthesize threads=_threads;
@property int controlState; // @synthesize controlState=_controlState;
@property(readonly) NSString *associatedProcessUUID; // @synthesize associatedProcessUUID=_associatedProcessUUID;
@property(readonly) DBGDebugSession *parentDebugSession; // @synthesize parentDebugSession=_parentDebugSession;
- (void)removeMemoryData:(id)arg1;
- (void)autoUpdateAllMemoryDatas;
- (void)rawMemoryDataForAddressExpression:(id)arg1 numberOfBytes:(unsigned long long)arg2 resultHandler:(id)arg3;
- (id)memoryDataForUID:(id)arg1;
- (id)memoryDataForAddressOfExpression:(id)arg1 numberOfBytes:(unsigned long long)arg2;
- (void)_handleCodeModuleChange:(id)arg1;
- (id)codeModuleForPath:(id)arg1;
- (BOOL)hasThreadsAutoRefreshStackFrames;
- (void)deregisterThreadAutoRefreshesStackFrames:(id)arg1;
- (void)registerThreadAutoRefreshesStackFrames:(id)arg1;
- (BOOL)_isCurentThreadCrashedStoppedForAnExceptionBreakpointOrStoppedForFatalSignal;
- (BOOL)_shouldLookForStackFrameWithDebugSymbols;
- (void)setInitalCurrentStackFrame;
@property(readonly) NSString *displayStatus;
- (id)initWithDebugSession:(id)arg1;
- (id)contentDelegateUIExtensionIdentifier;

// Remaining properties
@property(copy) NSSet *codeModules; // @dynamic codeModules;
@property(readonly) NSArray *memoryDatas; // @dynamic memoryDatas;
@property(copy) NSMutableSet *mutableCodeModules; // @dynamic mutableCodeModules;
@property NSMutableArray *mutableMemoryDatas; // @dynamic mutableMemoryDatas;

@end

@interface DBGThread : NSObject <IDEDebugNavigableModel>
{
    DBGProcess *_parentProcess;
    NSNumber *_uniqueID;
    NSString *_threadName;
    NSString *_queueName;
    int _state;
    int _stopReason;
    NSString *_lastReasonStopped;
    NSString *_threadDisplayName;
    BOOL _staleThreadDisplayName;
    NSString *_queueDisplayName;
    BOOL _staleQueueDisplayName;
    NSMutableArray *_stackFrames;
    BOOL _hasInitializedStackFrames;
    BOOL _autoRefreshStackFramesWhenPaused;
    BOOL _userSuspended;
}

+ (id)keyPathsForValuesAffectingStopped;
+ (void)initialize;
@property int stopReason; // @synthesize stopReason=_stopReason;
@property(copy) NSString *lastReasonStopped; // @synthesize lastReasonStopped=_lastReasonStopped;
@property BOOL userSuspended; // @synthesize userSuspended=_userSuspended;
@property BOOL autoRefreshStackFramesWhenPaused; // @synthesize autoRefreshStackFramesWhenPaused=_autoRefreshStackFramesWhenPaused;
@property BOOL hasInitializedStackFrames; // @synthesize hasInitializedStackFrames=_hasInitializedStackFrames;
@property int state; // @synthesize state=_state;
@property(copy) NSString *queueName; // @synthesize queueName=_queueName;
@property(copy) NSString *threadName; // @synthesize threadName=_threadName;
@property(readonly) NSNumber *uniqueID; // @synthesize uniqueID=_uniqueID;
@property(readonly) DBGProcess *parentProcess; // @synthesize parentProcess=_parentProcess;
- (void)requestUnsuspend;
- (void)requestSuspend;
- (void)requestStackFrames:(unsigned long long)arg1 resultHandler:(id)arg2;
- (void)refreshStackFramesAndSetFirstFrame;
- (BOOL)refreshStackFrames;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)_inferStateFromStackFrames:(id)arg1;
- (void)inferState;
- (void)getLocalStackFrames:(id *)arg1 range:(struct _NSRange)arg2;
- (id)objectInLocalStackFramesAtIndex:(unsigned long long)arg1;
- (unsigned long long)countOfLocalStackFrames;
@property(readonly) NSMutableArray *primitiveStackFrames;
@property(copy) NSArray *stackFrames; // @dynamic stackFrames;
@property(readonly, getter=isStopped) BOOL stopped;
- (void)_delayedInferState;
@property(readonly) NSString *queueDisplayName; // @dynamic queueDisplayName;
@property(readonly) NSString *threadDisplayName; // @dynamic threadDisplayName;
- (id)description;
@property(readonly) NSString *associatedProcessUUID;
- (id)initWithParentProcess:(id)arg1 uniqueID:(id)arg2;

// Remaining properties
@property(readonly) NSMutableArray *mutableStackFrames; // @dynamic mutableStackFrames;

@end

@interface DBGStackFrame : NSObject <IDEDebugNavigableModel>
{
    DBGThread *_parentThread;
    DBGCodeModule *_module;
    NSNumber *_frameNumber;
    NSNumber *_framePointer;
    NSString *_name;
    NSString *_displayName;
    BOOL _hasSymbols;
    NSURL *_fileURL;
    NSNumber *_lineNumber;
    NSString *_instructionPointerAddressString;
}

+ (id)keyPathsForValuesAffectingDisplayName;
+ (id)uninitializedStackFrameForThread:(id)arg1 withFrameNumber:(id)arg2;
@property DBGCodeModule *module; // @synthesize module=_module;
@property(copy) NSString *instructionPointerAddressString; // @synthesize instructionPointerAddressString=_instructionPointerAddressString;
@property(copy) NSNumber *lineNumber; // @synthesize lineNumber=_lineNumber;
@property(copy) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property BOOL hasSymbols; // @synthesize hasSymbols=_hasSymbols;
@property(copy) NSString *name; // @synthesize name=_name;
@property(copy) NSNumber *framePointer; // @synthesize framePointer=_framePointer;
@property(copy) NSNumber *frameNumber; // @synthesize frameNumber=_frameNumber;
@property DBGThread *parentThread; // @synthesize parentThread=_parentThread;
- (void)resetDataValues;
- (void)requestDataValueForExpression:(id)arg1 atBlockStartAddress:(id)arg2 onQueue:(struct dispatch_queue_s *)arg3 withResultBlock:(id)arg4;
- (void)requestDataValueForSymbol:(id)arg1 atLocation:(id)arg2 onQueue:(struct dispatch_queue_s *)arg3 withResultBlock:(id)arg4;
- (void)requestDisassembly:(id)arg1;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
- (id)description;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
@property(readonly) NSString *associatedProcessUUID;
- (id)initWithParentThread:(id)arg1 frameNumber:(id)arg2 framePointer:(id)arg3 name:(id)arg4;

// Remaining properties
@property(readonly) NSArray *arguments; // @dynamic arguments;
@property(readonly) NSArray *fileStatics; // @dynamic fileStatics;
@property(readonly) NSArray *locals; // @dynamic locals;
@property(readonly) NSArray *registers; // @dynamic registers;

@end

@interface DBGDataValue : NSObject <DBGLazyObservableDictionaryDelegate, IDEDataValue>
{
    DBGStackFrame *_stackFrame;
    NSMutableSet *_pendingChildValueLookups;
    DBGDataType *_dynamicType;
    int _valueValidity;
    BOOL _containsFunctionExpressions;
    DBGDataSummaryFormatter *_summaryFormatter;
    NSMutableSet *_requestedChildrenByName;
    DBGLazyObservableDictionary *_lazyChildValuesByName;
}

+ (id)keyPathsForValuesAffectingFormattedSummary;
+ (id)keyPathsForValuesAffectingTypeHasChanged;
+ (id)keyPathsForValuesAffectingType;
+ (id)kvoChildPathForValuePath:(id)arg1;
@property NSDictionary *lazyChildValuesByName; // @synthesize lazyChildValuesByName=_lazyChildValuesByName;
@property DBGDataSummaryFormatter *summaryFormatter; // @synthesize summaryFormatter=_summaryFormatter;
@property BOOL containsFunctionExpressions; // @synthesize containsFunctionExpressions=_containsFunctionExpressions;
@property int valueValidity; // @synthesize valueValidity=_valueValidity;
@property(readonly) DBGDataType *dynamicType; // @synthesize dynamicType=_dynamicType;
@property(readonly) DBGStackFrame *stackFrame; // @synthesize stackFrame=_stackFrame;
- (id)_contentDescription;
- (id)_contentDescriptionWithChildValuesAtLevel:(unsigned long long)arg1;
- (id)description;
- (id)_paddingForLevel:(unsigned long long)arg1;
- (id)valueForKey:(id)arg1 forLazyDictionary:(id)arg2;
@property(readonly) BOOL childValuesCountValid;
@property(readonly) NSArray *childValues;
@property(readonly) BOOL hasChildValues;
@property(readonly) BOOL inScope;
- (void)_summaryFormatterInvalidated:(id)arg1;
@property(readonly) BOOL formattedSummaryHasChanged;
@property(readonly) NSString *formattedSummary;
@property(readonly) BOOL typeHasChanged;
@property(readonly) NSString *type;
@property(readonly) BOOL valueHasChanged;
@property(readonly) BOOL isValueEditable;
@property(copy) NSString *value;
@property(readonly) NSString *name;
- (unsigned long long)indexOfChildValueWithName:(id)arg1;
@property(readonly) DBGDataValue *parent;
@property(readonly) BOOL dynamicTypeHasChanged;
@property(readonly) BOOL summaryHasChanged;
@property DBGDataValueFormat *format;
@property(readonly) NSString *blockStartAddress;
@property(readonly) NSString *summary;
@property(readonly) NSString *typeDescription;
- (void)setDynamicType:(id)arg1;
@property(readonly) DBGDataType *staticType;
@property(readonly) NSString *expressionPath;
- (void)_handleChildValuesChanged;
- (id)initWithStackFrame:(id)arg1;
- (id)init;

@end

@interface DBGDataType : NSObject
{
    NSString *_typeName;
    NSString *_typeNameWithoutQualifiers;
}

+ (BOOL)isZombie:(id)arg1;
@property(readonly) NSString *typeName; // @synthesize typeName=_typeName;
@property(readonly) NSString *typeNameWithoutQualifiers;
@property(readonly) BOOL isUnknownType;
@property(readonly) BOOL isPointer;
- (id)initWithTypename:(id)arg1;

@end

@interface DBGStackFramesDefaultCompressionStrategy : NSObject <IDEDebugCompressionStrategy>
{
}

+ (id)genericMaskFilePathWithColorsInRed:(double *)arg1 green:(double *)arg2 blue:(double *)arg3 alpha:(double *)arg4;
+ (id)maskFilePathForUserCodeWithColorsInRed:(double *)arg1 green:(double *)arg2 blue:(double *)arg3 alpha:(double *)arg4;
+ (id)maskFilePathForModulePathString:(id)arg1 withColorsInRed:(double *)arg2 green:(double *)arg3 blue:(double *)arg4 alpha:(double *)arg5;
+ (id)_filePathForBlock:(id)arg1 withColorsInRed:(void)arg2 green:(double *)arg3 blue:(double *)arg4 alpha:(double *)arg5;
+ (id)sharedInstance;
- (id)compressStackFrames:(id)arg1 level:(unsigned long long)arg2;
- (unsigned long long)defaultCompressionLevel;
- (unsigned long long)maxCompressionLevel;
- (id)_internalInit;
- (id)init;

@end

@interface DBGCodeModule : NSObject
{
    DVTFilePath *_filePath;
    NSString *_name;
    NSNumber *_timestamp;
}

+ (id)keyPathsForValuesAffectingTimestamp;
+ (id)keyPathsForValuesAffectingName;
@property(readonly) DVTFilePath *filePath; // @synthesize filePath=_filePath;
@property(readonly) NSNumber *timestamp;
@property(readonly) NSString *name; // @synthesize name=_name;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)initWithPathString:(id)arg1;

@end

@interface DBGDataFormatter : NSObject
{
    DBGDataValue *_dataValue;
    BOOL _fetching;
    BOOL _ready;
    BOOL _notAvailable;
}

+ (id)logAspect;
@property BOOL notAvailable; // @synthesize notAvailable=_notAvailable;
@property BOOL ready; // @synthesize ready=_ready;
@property BOOL fetching; // @synthesize fetching=_fetching;
@property(readonly) DBGDataValue *dataValue; // @synthesize dataValue=_dataValue;
- (id)initFormatterForDataValue:(id)arg1;

// Remaining properties
@property(readonly) NSSet *dependantDataValueExpressions; // @dynamic dependantDataValueExpressions;
@property(readonly) NSSet *dependantDataValuePaths; // @dynamic dependantDataValuePaths;
@property(readonly) DVTFilePath *dylibPath; // @dynamic dylibPath;

@end

@interface DBGDataSummaryFormatter : DBGDataFormatter
{
    NSSet *_pathValueTokens;
    NSMutableDictionary *_cachedPathValues;
    NSMutableDictionary *_cachedExpressionValues;
    NSMapTable *_expressionPartToData;
    NSMapTable *_expressionDataObservers;
    NSAttributedString *_attributedSummaryValue;
    NSArray *_updatedRangesInSummaryValue;
    NSMutableSet *_updateRangeObservers;
    NSString *_summaryValue;
    DBGDataSummaryFormat *_format;
    BOOL _hasUpdatedRanges;
    BOOL _containsFunctionExpressions;
}

+ (id)keyPathsForValuesAffectingSummaryValue;
@property BOOL containsFunctionExpressions; // @synthesize containsFunctionExpressions=_containsFunctionExpressions;
@property NSArray *updatedRangesInSummaryValue; // @synthesize updatedRangesInSummaryValue=_updatedRangesInSummaryValue;
@property BOOL hasUpdatedRanges; // @synthesize hasUpdatedRanges=_hasUpdatedRanges;
@property(readonly) NSAttributedString *attributedSummaryValue; // @synthesize attributedSummaryValue=_attributedSummaryValue;
@property(readonly) DBGDataSummaryFormat *format; // @synthesize format=_format;
@property(readonly) NSString *formatString;
@property(readonly) NSString *summaryValue; // @synthesize summaryValue=_summaryValue;
- (void)finishedLookups;
- (void)_resetAttributedSummaryValue;
- (void)checkDependentExpressions;
- (void)registerForDependentPaths;
- (id)initFormatterForDataValue:(id)arg1 withFormat:(id)arg2;

@end

@interface DBGSummaryPart : NSObject
{
    NSString *_wholeString;
    struct _NSRange _partRange;
    struct _NSRange _contentRange;
    NSArray *_children;
    NSArray *_valuePathParts;
    NSArray *_expressionParts;
}

+ (id)formatterForString:(id)arg1;
+ (id)propertyPathForField:(int)arg1;
+ (int)dataFieldForString:(id)arg1;
@property(readonly) NSArray *children; // @synthesize children=_children;
@property(readonly) NSString *wholeString; // @synthesize wholeString=_wholeString;
@property(readonly) struct _NSRange contentRange; // @synthesize contentRange=_contentRange;
@property(readonly) struct _NSRange partRange; // @synthesize partRange=_partRange;
@property(readonly) BOOL requiresExpressionPath;
@property(readonly) NSArray *expressionParts;
@property(readonly) NSArray *valuePathParts;
- (id)stringForValuePaths:(id)arg1 expressionValues:(id)arg2 andDataValue:(id)arg3 missingParts:(char *)arg4;
@property(readonly) NSString *contentString;
@property(readonly) NSString *partString;
- (BOOL)parse;
- (id)description;
- (id)initWithString:(id)arg1 partRange:(struct _NSRange)arg2 andContentRange:(struct _NSRange)arg3;

@end

@interface DBGSummaryExpressionPart : DBGSummaryPart
{
    int _field;
}

@property(readonly) NSString *valueKeyPath;
- (id)expressionParts;
- (id)valuePathParts;
- (id)stringForValuePaths:(id)arg1 expressionValues:(id)arg2 andDataValue:(id)arg3 missingParts:(char *)arg4;
- (id)expressionStringWithValuePaths:(id)arg1 andDataValue:(id)arg2 missingParts:(char *)arg3;
- (id)initWithString:(id)arg1 withStartAt:(unsigned long long)arg2;

@end

@interface DBGSummaryValuePathPart : DBGSummaryPart
{
    int _field;
}

@property(readonly) NSString *valueKeyPath;
- (id)expressionParts;
- (id)valuePathParts;
- (id)stringForValuePaths:(id)arg1 expressionValues:(id)arg2 andDataValue:(id)arg3 missingParts:(char *)arg4;
- (BOOL)parse;
- (id)initWithString:(id)arg1 withStartAt:(unsigned long long)arg2;

@end

@interface DBGSummaryPlaceholderPart : DBGSummaryPart
{
    int _type;
}

- (BOOL)requiresExpressionPath;
- (id)stringForValuePaths:(id)arg1 expressionValues:(id)arg2 andDataValue:(id)arg3 missingParts:(char *)arg4;
- (id)initWithString:(id)arg1 withStartAt:(unsigned long long)arg2;

@end

@interface DBGDataFormatterManager : NSObject
{
    NSMapTable *_sessionSpecificData;
    NSMutableDictionary *_summaryFormatsByType;
    NSMutableDictionary *_userDefinedFormatters;
    BOOL _hasUnhandledArchiveData;
}

+ (id)summaryFormatterDirectories;
+ (id)legacyCustomDataFormattersPath;
+ (id)sharedManager;
- (void)writeUserDefinedFormatters;
- (void)loadUserDefinedFormatters;
- (void)addSummaryFormatters:(id)arg1 fromXMLUnarchiver:(id)arg2;
- (void)dvt_encodeRelationshipsWithXMLArchiver:(id)arg1;
- (void)dvt_encodeAttributesWithXMLArchiver:(id)arg1;
- (void)setSummaryFormat:(id)arg1 forType:(id)arg2;
- (id)summaryFormatForType:(id)arg1;
- (id)summaryFormatForDataValue:(id)arg1;
- (id)_sessionSpecficInfo:(id)arg1;
- (id)summaryFormatsByType;
- (id)loadDataFormattersFromDirectory:(id)arg1;
- (id)init;

@end

@interface DBGDataSummaryFormat : NSObject
{
    NSString *_formatString;
    NSString *_type;
    DBGSummaryPart *_formatRoot;
    DVTFilePath *_dylibPath;
}

+ (id)zombieFormatForType:(id)arg1;
+ (BOOL)writeSummaryFormats:(id)arg1 toPath:(id)arg2;
+ (id)legacySummaryFormatsAtPath:(id)arg1;
@property(readonly) DVTFilePath *dylibPath; // @synthesize dylibPath=_dylibPath;
@property(readonly) NSString *type; // @synthesize type=_type;
@property(readonly) NSString *formatString; // @synthesize formatString=_formatString;
@property(readonly) DBGSummaryPart *formatRoot; // @synthesize formatRoot=_formatRoot;
- (void)dvt_encodeRelationshipsWithXMLArchiver:(id)arg1;
- (void)dvt_encodeAttributesWithXMLArchiver:(id)arg1;
- (void)setType:(id)arg1;
- (void)setFormatString:(id)arg1;
- (id)init;
- (id)initFromXMLUnarchiver:(id)arg1 archiveVersion:(float)arg2;
- (id)initWithString:(id)arg1 forType:(id)arg2 usingDylibPath:(id)arg3;

@end

@interface DBGLazyObservableDictionary : NSMutableDictionary
{
    NSMutableDictionary *_backingDictionary;
    id <DBGLazyObservableDictionaryDelegate> _delegate;
}

@property(readonly) id <DBGLazyObservableDictionaryDelegate> delegate; // @synthesize delegate=_delegate;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)keyEnumerator;
- (id)objectForKey:(id)arg1;
- (id)valueForKeyPath:(id)arg1;
- (unsigned long long)count;
- (BOOL)hasObjectForKey:(id)arg1;
- (id)initWithDelegate:(id)arg1;

@end

@interface DBGMemoryData : NSObject <IDEDebugNavigableModel>
{
    NSString *_expression;
    unsigned long long _startingAddress;
    unsigned long long _numberOfBytes;
    NSData *_rawMemoryData;
    BOOL _shouldAutoUpdate;
    DBGProcess *_process;
    NSString *_uid;
    NSURL *_url;
}

@property(readonly) NSURL *url; // @synthesize url=_url;
@property(readonly) NSString *uid; // @synthesize uid=_uid;
@property BOOL shouldAutoUpdate; // @synthesize shouldAutoUpdate=_shouldAutoUpdate;
@property(copy) NSData *rawMemoryData; // @synthesize rawMemoryData=_rawMemoryData;
@property unsigned long long numberOfBytes; // @synthesize numberOfBytes=_numberOfBytes;
@property unsigned long long startingAddress; // @synthesize startingAddress=_startingAddress;
@property(copy) NSString *expression; // @synthesize expression=_expression;
- (void)_updateUsingExpression:(id)arg1 numberOfBytes:(unsigned long long)arg2;
- (void)updateNumberOfBytes:(unsigned long long)arg1;
- (void)updateUsingExpression:(id)arg1;
- (void)update;
- (void)autoUpdate;
@property(readonly) NSString *associatedProcessUUID;
- (id)initWithExpression:(id)arg1 numberOfBytes:(unsigned long long)arg2 process:(id)arg3;

@end

@interface _DBGDebuggerFoundationPrivateClassForFindingBundle : NSObject
{
}

@end

@interface DBGThreadStateInterpreter : NSObject
{
}

+ (BOOL)_doesStackFrameAtIndex:(unsigned long long)arg1 inStackFrames:(id)arg2 matchName:(id)arg3;
+ (BOOL)_doAnyOfTheFirst:(unsigned long long)arg1 stackFrames:(id)arg2 matchName:(id)arg3;
+ (BOOL)_isThreadInConditionalWait:(id)arg1;
+ (BOOL)_isThreadWaitingForLock:(id)arg1;
+ (BOOL)_isThreadWaitingForSpinLock:(id)arg1;
+ (void)updateStateOfThread:(id)arg1 usingStackFrames:(id)arg2;
+ (BOOL)useThreadStateInterpreter;

@end

@interface DBGDataValueFormat : NSObject
{
    NSString *_displayName;
    unsigned long long _tag;
}

+ (id)binaryFormatUsingTag:(unsigned long long)arg1;
+ (id)osTypeFormatUsingTag:(unsigned long long)arg1;
+ (id)octalFormatUsingTag:(unsigned long long)arg1;
+ (id)unsignedDecimalFormatUsingTag:(unsigned long long)arg1;
+ (id)decimalFormatUsingTag:(unsigned long long)arg1;
+ (id)hexFormatUsingTag:(unsigned long long)arg1;
+ (id)naturalFormatUsingTag:(unsigned long long)arg1;
@property(readonly) unsigned long long tag; // @synthesize tag=_tag;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
- (id)initWithDisplayName:(id)arg1 tag:(unsigned long long)arg2;

@end

@interface DBGSignal : NSObject
{
    unsigned long long _number;
    NSString *_name;
    NSString *_description;
    BOOL _isFatal;
}

+ (id)signals;
+ (BOOL)isSignalNumberFatal:(unsigned long long)arg1;
+ (BOOL)isSignalFatal:(id)arg1;
@property(readonly) BOOL isFatal; // @synthesize isFatal=_isFatal;
@property(readonly) NSString *description; // @synthesize description=_description;
@property(readonly) NSString *name; // @synthesize name=_name;
@property(readonly) unsigned long long number; // @synthesize number=_number;
- (id)_initWithNumber:(unsigned long long)arg1 name:(id)arg2 description:(id)arg3 isFatal:(BOOL)arg4;

@end

@interface IDEBreakpoint (DBGIDEBreakpointAdditions)
- (BOOL)isValid;
@end

